specVersion = "2"

include "common.json"
include "graal-common.json"

# overlay version
overlay = ${ci.overlay}

# This must always point to HEAD in the master branch but can be used to point
# to another branch/commit in a Graal PR when mx changes are required for the PR.
mx : {
  packages : {
    mx: ${mx_version}
  }
}

download-hsdis : {
  setup : [
    ["mx", "hsdis", "||", "true"]
  ]
}

oraclejdk8 :          { downloads : { JAVA_HOME : ${jdks.oraclejdk8},      EXTRA_JAVA_HOMES : { pathlist :[ ${jdks.labsjdk-ee-11} ]} }}
oraclejdk8Only :      { downloads : { JAVA_HOME : ${jdks.oraclejdk8} }}
oraclejdk8Debug :     { downloads : { JAVA_HOME : ${jdks.oraclejdk8Debug}, EXTRA_JAVA_HOMES : { pathlist :[ ${jdks.labsjdk-ee-11} ]} }}
oraclejdk8OnlyDebug : { downloads : { JAVA_HOME : ${jdks.oraclejdk8Debug} }}

openjdk8 :          { downloads : { JAVA_HOME : ${jdks.openjdk8} }}

oraclejdk11 :       { downloads : { JAVA_HOME : ${jdks.oraclejdk11} }}
oraclejdk17 :       { downloads : { JAVA_HOME : ${jdks.oraclejdk17} }}
openjdk11 :         { downloads : { JAVA_HOME : ${jdks.openjdk11} }}

labsjdk-ce-11 :      { downloads : { JAVA_HOME : ${jdks.labsjdk-ce-11} }}
labsjdk-ee-11 :      { downloads : { JAVA_HOME : ${jdks.labsjdk-ee-11} }}
labsjdk-ce-17 :      { downloads : { JAVA_HOME : ${jdks.labsjdk-ce-17} }}
labsjdk-ee-17 :      { downloads : { JAVA_HOME : ${jdks.labsjdk-ee-17} }}
labsjdk-ce-17Debug : { downloads : { JAVA_HOME : ${jdks.labsjdk-ce-17Debug} }}
labsjdk-ee-17Debug : { downloads : { JAVA_HOME : ${jdks.labsjdk-ee-17Debug} }}

common : ${mx} ${deps.common} {
  catch_files : ${catch_files},
  logs : [
    "*/es-*.json"
  ]
}

linux : ${common} ${deps.linux}

darwin : ${common} ${deps.darwin}

windows : ${common} ${deps.windows}

linux-amd64 : ${linux} {
  capabilities : [linux, amd64]
}

darwin-amd64 : ${darwin} {
  capabilities : [darwin, amd64]
}

windows-amd64 : ${windows} {
  capabilities : [windows, amd64]
}

linux-aarch64 : ${linux} {
  capabilities : [linux, aarch64]
}

DEFAULT_HEAP_SIZE : "8G"
LARGE_HEAP_SIZE : "31G"
LARGE_YOUNG_GEN_SIZE : "27G"

eclipse : ${downloads.eclipse}

jdt : ${downloads.jdt}

# for cases where a maven package is not easily accessible
maven-download-unix : {
  downloads : {
    MAVEN_HOME: {name: maven, version: "3.3.9", platformspecific: false}
  }
  environment : {
    PATH : "$MAVEN_HOME/bin:$JAVA_HOME/bin:$PATH"
  }
}

linux-deploy : ${linux} {
  packages : {
    maven : ">=3.3.9"
  }
}

darwin-deploy : ${darwin} ${maven-download-unix} {
  environment : {
    PATH : "$MAVEN_HOME/bin:$JAVA_HOME/bin:/usr/local/bin:$PATH"
  }
}

svm-common: ${mx} ${svm.deps.common}

svm-common-linux-amd64: ${svm-common} ${svm.deps.linux_amd64} ${linux-amd64} {
  timelimit: "55:00"
}

svm-common-linux-aarch64: ${svm-common} ${svm.deps.linux_aarch64} ${linux-aarch64} {
  timelimit: "55:00"
}

# fast is necessary here as slow machines don't handle image builds well
svm-capabilities: [linux, amd64, fast]
svm-capabilities-base : {
  capabilities : ${svm-capabilities}
}

svm-capabilities-avx2 : {
  capabilities : ${svm-capabilities} [avx2]
}

svm-capabilities-manycores : {
  capabilities : ${svm-capabilities} [manycores]
}

svm-common-darwin: ${svm-common} ${svm.deps.darwin} ${darwin-amd64} {
  timelimit: "45:00"
}

svm-common-windows-openjdk8: ${svm-common} ${svm.deps.windows} ${windows-amd64} ${devkits.windows-openjdk8} {
  packages : {
  }
  timelimit: "45:00"
}

svm-common-windows-oraclejdk8: ${svm-common} ${svm.deps.windows} ${windows-amd64} ${devkits.windows-oraclejdk8} {
  packages : {
  }
  timelimit: "45:00"
}

svm-common-windows-jdk11: ${svm-common} ${svm.deps.windows} ${windows-amd64} ${devkits.windows-jdk11} {
  timelimit: "45:00"
}

svm-common-windows-jdk17: ${svm-common} ${svm.deps.windows} ${windows-amd64} ${devkits.windows-jdk17} {
  timelimit: "45:00"
}

svm-common-sulong: {
  packages: {
    llvm: "==6.0.1"
  }
}
