From c2b0a3b117b6c4c51878ffb9b3e41aae7b35f382 Mon Sep 17 00:00:00 2001
From: Loic Ottet <loic.ottet@oracle.com>
Date: Mon, 23 Sep 2019 16:55:33 +0200
Subject: [PATCH 1/3] [GR-17692] [Statepoints] Support for compressed pointers
 in the statepoint emission pass

---
 llvm/include/llvm/IR/IRBuilder.h              |  19 +++
 llvm/lib/CodeGen/BuiltinGCs.cpp               |  26 ++++
 llvm/lib/IR/IRBuilder.cpp                     |  19 +++
 .../Scalar/RewriteStatepointsForGC.cpp        | 135 +++++++++++++-----
 4 files changed, 167 insertions(+), 32 deletions(-)

diff --git a/llvm/include/llvm/IR/IRBuilder.h b/llvm/include/llvm/IR/IRBuilder.h
index 9cefc9aa764c..effc0051c80d 100644
--- a/llvm/include/llvm/IR/IRBuilder.h
+++ b/llvm/include/llvm/IR/IRBuilder.h
@@ -884,6 +884,16 @@ public:
                                    ArrayRef<Value *> GCArgs,
                                    const Twine &Name = "");
 
+  /// Create a call to the experimental.gc.statepoint intrinsic to
+  /// start a new statepoint sequence.
+  CallInst *CreateGCStatepointCall(uint64_t ID, uint32_t NumPatchBytes,
+                                   Value *ActualCallee, uint32_t Flags,
+                                   ArrayRef<Value *> CallArgs,
+                                   Optional<ArrayRef<Use>> TransitionArgs,
+                                   Optional<ArrayRef<Value *>> DeoptArgs,
+                                   ArrayRef<Value *> GCArgs,
+                                   const Twine &Name = "");
+
   /// Conveninence function for the common case when CallArgs are filled
   /// in using makeArrayRef(CS.arg_begin(), CS.arg_end()); Use needs to be
   /// .get()'ed to get the Value pointer.
@@ -911,6 +921,15 @@ public:
       Optional<ArrayRef<Use>> DeoptArgs, ArrayRef<Value *> GCArgs,
       const Twine &Name = "");
 
+  /// Create an invoke to the experimental.gc.statepoint intrinsic to
+  /// start a new statepoint sequence.
+  InvokeInst *CreateGCStatepointInvoke(
+      uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee,
+      BasicBlock *NormalDest, BasicBlock *UnwindDest, uint32_t Flags,
+      ArrayRef<Value *> InvokeArgs, Optional<ArrayRef<Use>> TransitionArgs,
+      Optional<ArrayRef<Value *>> DeoptArgs, ArrayRef<Value *> GCArgs,
+      const Twine &Name = "");
+
   // Convenience function for the common case when CallArgs are filled in using
   // makeArrayRef(CS.arg_begin(), CS.arg_end()); Use needs to be .get()'ed to
   // get the Value *.
diff --git a/llvm/lib/CodeGen/BuiltinGCs.cpp b/llvm/lib/CodeGen/BuiltinGCs.cpp
index bfc10cb3fef2..8598b456b14b 100644
--- a/llvm/lib/CodeGen/BuiltinGCs.cpp
+++ b/llvm/lib/CodeGen/BuiltinGCs.cpp
@@ -112,6 +112,31 @@ public:
   }
 };
 
+/// A GC strategy for the LLVM backend of the Graal compiler. The strategy
+/// is similar to the statepoint-example GC, but adds support for a second
+/// type of pointer in addrspace(2). Live pointers in this address space
+/// are inserted as deopt parameters as well as GC parameters in the
+/// statepoint intrinsic. As a consequence, this GC doesn't support regular
+/// deopt parameters
+class CompressedPointerGC : public GCStrategy {
+public:
+  CompressedPointerGC() {
+    UseStatepoints = true;
+    // These options are all gc.root specific, we specify them so that the
+    // gc.root lowering code doesn't run.
+    NeededSafePoints = false;
+    UsesMetadata = false;
+  }
+
+  Optional<bool> isGCManagedPointer(const Type *Ty) const override {
+    // Method is only valid on pointer typed values.
+    const PointerType *PT = cast<PointerType>(Ty);
+    // addrspace(1) represents absolute tracked pointers, and addrspace(2)
+    // represents heap base-relative pointers.
+    return (1 == PT->getAddressSpace() || 2 == PT->getAddressSpace());
+  }
+};
+
 } // end anonymous namespace
 
 // Register all the above so that they can be found at runtime.  Note that
@@ -125,6 +150,7 @@ static GCRegistry::Add<ShadowStackGC>
 static GCRegistry::Add<StatepointGC> D("statepoint-example",
                                        "an example strategy for statepoint");
 static GCRegistry::Add<CoreCLRGC> E("coreclr", "CoreCLR-compatible GC");
+static GCRegistry::Add<CompressedPointerGC> F("compressed-pointer", "GC supporting compressed pointers");
 
 // Provide hook to ensure the containing library is fully loaded.
 void llvm::linkAllBuiltinGCs() {}
diff --git a/llvm/lib/IR/IRBuilder.cpp b/llvm/lib/IR/IRBuilder.cpp
index 91ca984b755c..a2ea016d84a9 100644
--- a/llvm/lib/IR/IRBuilder.cpp
+++ b/llvm/lib/IR/IRBuilder.cpp
@@ -666,6 +666,15 @@ CallInst *IRBuilderBase::CreateGCStatepointCall(
       DeoptArgs, GCArgs, Name);
 }
 
+CallInst *IRBuilderBase::CreateGCStatepointCall(
+    uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, uint32_t Flags,
+    ArrayRef<Value *> CallArgs, Optional<ArrayRef<Use>> TransitionArgs,
+    Optional<ArrayRef<Value *>> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name) {
+  return CreateGCStatepointCallCommon<Value *, Use, Value *, Value *>(
+      this, ID, NumPatchBytes, ActualCallee, Flags, CallArgs, TransitionArgs,
+      DeoptArgs, GCArgs, Name);
+}
+
 CallInst *IRBuilderBase::CreateGCStatepointCall(
     uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee,
     ArrayRef<Use> CallArgs, Optional<ArrayRef<Value *>> DeoptArgs,
@@ -723,6 +732,16 @@ InvokeInst *IRBuilderBase::CreateGCStatepointInvoke(
       InvokeArgs, TransitionArgs, DeoptArgs, GCArgs, Name);
 }
 
+InvokeInst *IRBuilderBase::CreateGCStatepointInvoke(
+    uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee,
+    BasicBlock *NormalDest, BasicBlock *UnwindDest, uint32_t Flags,
+    ArrayRef<Value *> InvokeArgs, Optional<ArrayRef<Use>> TransitionArgs,
+    Optional<ArrayRef<Value *>> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name) {
+  return CreateGCStatepointInvokeCommon<Value *, Use, Value *, Value *>(
+      this, ID, NumPatchBytes, ActualInvokee, NormalDest, UnwindDest, Flags,
+      InvokeArgs, TransitionArgs, DeoptArgs, GCArgs, Name);
+}
+
 InvokeInst *IRBuilderBase::CreateGCStatepointInvoke(
     uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee,
     BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Use> InvokeArgs,
diff --git a/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp b/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp
index b7830555bf73..0e6f14031aee 100644
--- a/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp
+++ b/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp
@@ -310,12 +310,12 @@ static void findLiveSetAtInst(Instruction *inst, GCPtrLivenessData &Data,
 // TODO: Once we can get to the GCStrategy, this becomes
 // Optional<bool> isGCManagedPointer(const Type *Ty) const override {
 
-static bool isGCPointerType(Type *T) {
+static bool isGCPointerType(Type *T, bool Compressed) {
   if (auto *PT = dyn_cast<PointerType>(T))
     // For the sake of this example GC, we arbitrarily pick addrspace(1) as our
     // GC managed heap.  We know that a pointer into this heap needs to be
     // updated and that no other pointer does.
-    return PT->getAddressSpace() == 1;
+    return PT->getAddressSpace() == 1 || (Compressed && PT->getAddressSpace() == 2);
   return false;
 }
 
@@ -323,38 +323,66 @@ static bool isGCPointerType(Type *T) {
 // pointer and b) is of a type this code expects to encounter as a live value.
 // (The insertion code will assert that a type which matches (a) and not (b)
 // is not encountered.)
-static bool isHandledGCPointerType(Type *T) {
+static bool isHandledGCPointerType(Type *T, bool Compressed) {
   // We fully support gc pointers
-  if (isGCPointerType(T))
+  if (isGCPointerType(T, Compressed))
     return true;
   // We partially support vectors of gc pointers. The code will assert if it
   // can't handle something.
   if (auto VT = dyn_cast<VectorType>(T))
-    if (isGCPointerType(VT->getElementType()))
+    if (isGCPointerType(VT->getElementType(), Compressed))
       return true;
   return false;
 }
 
+static bool supportsCompressedPointers(Function& F) {
+  // TODO: This should check the GCStrategy
+  if (F.hasGC()) {
+    const auto &FunctionGCName = F.getGC();
+    const StringRef CompressedName("compressed-pointer");
+    return (CompressedName == FunctionGCName);
+  } else
+    return false;
+}
+
+static bool supportsCompressedPointers(BasicBlock& BB) {
+  return supportsCompressedPointers(*BB.getParent());
+}
+
+static bool supportsCompressedPointers(Instruction& Inst) {
+  return supportsCompressedPointers(*Inst.getParent());
+}
+
 #ifndef NDEBUG
+static bool containsGCPtrType(Type *Ty, bool Compressed);
+
+static bool containsGCPtrTypeCompressed(Type *Ty) {
+  return containsGCPtrType(Ty, true);
+}
+
+static bool containsGCPtrTypeNotCompressed(Type *Ty) {
+  return containsGCPtrType(Ty, false);
+}
+
 /// Returns true if this type contains a gc pointer whether we know how to
 /// handle that type or not.
-static bool containsGCPtrType(Type *Ty) {
-  if (isGCPointerType(Ty))
+static bool containsGCPtrType(Type *Ty, bool Compressed) {
+  if (isGCPointerType(Ty, Compressed))
     return true;
   if (VectorType *VT = dyn_cast<VectorType>(Ty))
-    return isGCPointerType(VT->getScalarType());
+    return isGCPointerType(VT->getScalarType(), Compressed);
   if (ArrayType *AT = dyn_cast<ArrayType>(Ty))
-    return containsGCPtrType(AT->getElementType());
+    return containsGCPtrType(AT->getElementType(), Compressed);
   if (StructType *ST = dyn_cast<StructType>(Ty))
-    return llvm::any_of(ST->elements(), containsGCPtrType);
+    return llvm::any_of(ST->elements(), Compressed ? containsGCPtrTypeCompressed : containsGCPtrTypeNotCompressed);
   return false;
 }
 
 // Returns true if this is a type which a) is a gc pointer or contains a GC
 // pointer and b) is of a type which the code doesn't expect (i.e. first class
 // aggregates).  Used to trip assertions.
-static bool isUnhandledGCPointerType(Type *Ty) {
-  return containsGCPtrType(Ty) && !isHandledGCPointerType(Ty);
+static bool isUnhandledGCPointerType(Type *Ty, bool Compressed) {
+  return containsGCPtrType(Ty, Compressed) && !isHandledGCPointerType(Ty, Compressed);
 }
 #endif
 
@@ -1348,7 +1376,7 @@ static void CreateGCRelocates(ArrayRef<Value *> LiveVariables,
   // to an i8* of the right address space.  A bitcast is added later to convert
   // gc_relocate to the actual value's type.
   auto getGCRelocateDecl = [&] (Type *Ty) {
-    assert(isHandledGCPointerType(Ty));
+    assert(isHandledGCPointerType(Ty, supportsCompressedPointers(*StatepointToken)));
     auto AS = Ty->getScalarType()->getPointerAddressSpace();
     Type *NewTy = Type::getInt8PtrTy(M->getContext(), AS);
     if (auto *VT = dyn_cast<VectorType>(Ty))
@@ -1468,6 +1496,15 @@ static StringRef getDeoptLowering(CallBase *Call) {
   return "live-through";
 }
 
+static void getCompressedGCArgs(std::vector<Value *> &CompressedArgsVector,
+                                ArrayRef<Value *> GCArgs) {
+  for (Value *LiveVal : GCArgs) {
+    if (auto *PT = dyn_cast<PointerType>(LiveVal->getType()))
+      if (PT->getAddressSpace() == 2)
+        CompressedArgsVector.push_back(LiveVal);
+  }
+}
+
 static void
 makeStatepointExplicitImpl(CallBase *Call, /* to replace */
                            const SmallVectorImpl<Value *> &BasePtrs,
@@ -1642,9 +1679,22 @@ makeStatepointExplicitImpl(CallBase *Call, /* to replace */
   // Create the statepoint given all the arguments
   GCStatepointInst *Token = nullptr;
   if (auto *CI = dyn_cast<CallInst>(Call)) {
-    CallInst *SPCall = Builder.CreateGCStatepointCall(
-        StatepointID, NumPatchBytes, CallTarget, Flags, CallArgs,
-        TransitionArgs, DeoptArgs, GCArgs, "safepoint_token");
+    CallInst *SPCall;
+    if (supportsCompressedPointers(*Call)) {
+      assert(DeoptArgs->empty() &&
+             "Deopt args are not supported when using compressed pointers");
+      std::vector<Value *> CompressedArgsVector;
+      getCompressedGCArgs(CompressedArgsVector, GCArgs);
+      ArrayRef<Value *> CompressedArgs(CompressedArgsVector);
+
+      SPCall = Builder.CreateGCStatepointCall(
+          StatepointID, NumPatchBytes, CallTarget, Flags, CallArgs,
+          TransitionArgs, CompressedArgs, GCArgs, "safepoint_token");
+    } else {
+      SPCall = Builder.CreateGCStatepointCall(
+          StatepointID, NumPatchBytes, CallTarget, Flags, CallArgs,
+          TransitionArgs, DeoptArgs, GCArgs, "safepoint_token");
+    }
 
     SPCall->setTailCallKind(CI->getTailCallKind());
     SPCall->setCallingConv(CI->getCallingConv());
@@ -1669,10 +1719,24 @@ makeStatepointExplicitImpl(CallBase *Call, /* to replace */
     // Insert the new invoke into the old block.  We'll remove the old one in a
     // moment at which point this will become the new terminator for the
     // original block.
-    InvokeInst *SPInvoke = Builder.CreateGCStatepointInvoke(
-        StatepointID, NumPatchBytes, CallTarget, II->getNormalDest(),
-        II->getUnwindDest(), Flags, CallArgs, TransitionArgs, DeoptArgs, GCArgs,
-        "statepoint_token");
+    InvokeInst *SPInvoke;
+    if (supportsCompressedPointers(*Call)) {
+      assert(DeoptArgs->empty() &&
+             "Deopt args are not supported when using compressed pointers");
+      std::vector<Value *> CompressedArgsVector;
+      getCompressedGCArgs(CompressedArgsVector, GCArgs);
+      ArrayRef<Value *> CompressedArgs(CompressedArgsVector);
+
+      SPInvoke = Builder.CreateGCStatepointInvoke(
+          StatepointID, NumPatchBytes, CallTarget, II->getNormalDest(),
+          II->getUnwindDest(), Flags, CallArgs, TransitionArgs, CompressedArgs,
+          GCArgs, "statepoint_token");
+    } else {
+      SPInvoke = Builder.CreateGCStatepointInvoke(
+          StatepointID, NumPatchBytes, CallTarget, II->getNormalDest(),
+          II->getUnwindDest(), Flags, CallArgs, TransitionArgs, DeoptArgs,
+          GCArgs, "statepoint_token");
+    }
 
     SPInvoke->setCallingConv(II->getCallingConv());
 
@@ -2327,6 +2391,7 @@ static void rematerializeLiveValues(CallBase *Call,
 static bool insertParsePoints(Function &F, DominatorTree &DT,
                               TargetTransformInfo &TTI,
                               SmallVectorImpl<CallBase *> &ToUpdate) {
+  bool hasCompressedPointers = supportsCompressedPointers(F);
 #ifndef NDEBUG
   // sanity check the input
   std::set<CallBase *> Uniqued;
@@ -2361,9 +2426,9 @@ static bool insertParsePoints(Function &F, DominatorTree &DT,
     SmallVector<Value *, 64> DeoptValues;
 
     for (Value *Arg : GetDeoptBundleOperands(Call)) {
-      assert(!isUnhandledGCPointerType(Arg->getType()) &&
+      assert(!isUnhandledGCPointerType(Arg->getType(), hasCompressedPointers) &&
              "support for FCA unimplemented");
-      if (isHandledGCPointerType(Arg->getType()))
+      if (isHandledGCPointerType(Arg->getType(), hasCompressedPointers))
         DeoptValues.push_back(Arg);
     }
 
@@ -2524,7 +2589,7 @@ static bool insertParsePoints(Function &F, DominatorTree &DT,
 #ifndef NDEBUG
   // sanity check
   for (auto *Ptr : Live)
-    assert(isHandledGCPointerType(Ptr->getType()) &&
+    assert(isHandledGCPointerType(Ptr->getType(), hasCompressedPointers) &&
            "must be a gc pointer type");
 #endif
 
@@ -2649,8 +2714,10 @@ static bool shouldRewriteStatepointsIn(Function &F) {
     const auto &FunctionGCName = F.getGC();
     const StringRef StatepointExampleName("statepoint-example");
     const StringRef CoreCLRName("coreclr");
+    const StringRef CompressedName("compressed-pointer");
     return (StatepointExampleName == FunctionGCName) ||
-           (CoreCLRName == FunctionGCName);
+           (CoreCLRName == FunctionGCName) ||
+           (CompressedName == FunctionGCName);
   } else
     return false;
 }
@@ -2808,7 +2875,8 @@ bool RewriteStatepointsForGC::runOnFunction(Function &F, DominatorTree &DT,
 /// the live-out set of the basic block
 static void computeLiveInValues(BasicBlock::reverse_iterator Begin,
                                 BasicBlock::reverse_iterator End,
-                                SetVector<Value *> &LiveTmp) {
+                                SetVector<Value *> &LiveTmp,
+                                bool Compressed) {
   for (auto &I : make_range(Begin, End)) {
     // KILL/Def - Remove this definition from LiveIn
     LiveTmp.remove(&I);
@@ -2820,9 +2888,9 @@ static void computeLiveInValues(BasicBlock::reverse_iterator Begin,
 
     // USE - Add to the LiveIn set for this instruction
     for (Value *V : I.operands()) {
-      assert(!isUnhandledGCPointerType(V->getType()) &&
+      assert(!isUnhandledGCPointerType(V->getType(), Compressed) &&
              "support for FCA unimplemented");
-      if (isHandledGCPointerType(V->getType()) && !isa<Constant>(V)) {
+      if (isHandledGCPointerType(V->getType(), Compressed) && !isa<Constant>(V)) {
         // The choice to exclude all things constant here is slightly subtle.
         // There are two independent reasons:
         // - We assume that things which are constant (from LLVM's definition)
@@ -2840,6 +2908,7 @@ static void computeLiveInValues(BasicBlock::reverse_iterator Begin,
 }
 
 static void computeLiveOutSeed(BasicBlock *BB, SetVector<Value *> &LiveTmp) {
+  bool UseCompressedPointers = supportsCompressedPointers(*BB->getParent());
   for (BasicBlock *Succ : successors(BB)) {
     for (auto &I : *Succ) {
       PHINode *PN = dyn_cast<PHINode>(&I);
@@ -2847,9 +2916,9 @@ static void computeLiveOutSeed(BasicBlock *BB, SetVector<Value *> &LiveTmp) {
         break;
 
       Value *V = PN->getIncomingValueForBlock(BB);
-      assert(!isUnhandledGCPointerType(V->getType()) &&
+      assert(!isUnhandledGCPointerType(V->getType(), UseCompressedPointers) &&
              "support for FCA unimplemented");
-      if (isHandledGCPointerType(V->getType()) && !isa<Constant>(V))
+      if (isHandledGCPointerType(V->getType(), UseCompressedPointers) && !isa<Constant>(V))
         LiveTmp.insert(V);
     }
   }
@@ -2857,8 +2926,9 @@ static void computeLiveOutSeed(BasicBlock *BB, SetVector<Value *> &LiveTmp) {
 
 static SetVector<Value *> computeKillSet(BasicBlock *BB) {
   SetVector<Value *> KillSet;
+  bool UseCompressedPointers = supportsCompressedPointers(*BB);
   for (Instruction &I : *BB)
-    if (isHandledGCPointerType(I.getType()))
+    if (isHandledGCPointerType(I.getType(), UseCompressedPointers))
       KillSet.insert(&I);
   return KillSet;
 }
@@ -2895,12 +2965,13 @@ static void checkBasicSSA(DominatorTree &DT, GCPtrLivenessData &Data,
 static void computeLiveInValues(DominatorTree &DT, Function &F,
                                 GCPtrLivenessData &Data) {
   SmallSetVector<BasicBlock *, 32> Worklist;
+  bool UseCompressedPointers = supportsCompressedPointers(F);
 
   // Seed the liveness for each individual block
   for (BasicBlock &BB : F) {
     Data.KillSet[&BB] = computeKillSet(&BB);
     Data.LiveSet[&BB].clear();
-    computeLiveInValues(BB.rbegin(), BB.rend(), Data.LiveSet[&BB]);
+    computeLiveInValues(BB.rbegin(), BB.rend(), Data.LiveSet[&BB], UseCompressedPointers);
 
 #ifndef NDEBUG
     for (Value *Kill : Data.KillSet[&BB])
@@ -2972,7 +3043,7 @@ static void findLiveSetAtInst(Instruction *Inst, GCPtrLivenessData &Data,
   // (unless they're used again later).  This adjustment is
   // specifically what we need to relocate
   computeLiveInValues(BB->rbegin(), ++Inst->getIterator().getReverse(),
-                      LiveOut);
+                      LiveOut, supportsCompressedPointers(*BB));
   LiveOut.remove(Inst);
   Out.insert(LiveOut.begin(), LiveOut.end());
 }
-- 
2.31.1

