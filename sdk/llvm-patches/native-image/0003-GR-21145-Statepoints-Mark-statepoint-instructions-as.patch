From f9539da2e76ac217c8693fc853a85be472c4c02b Mon Sep 17 00:00:00 2001
From: Loic Ottet <loic.ottet@oracle.com>
Date: Wed, 12 Feb 2020 14:04:45 +0100
Subject: [PATCH 3/6] [GR-21145][Statepoints] Mark statepoint instructions as
 clobbering LR on AArch64

---
 llvm/lib/Target/AArch64/AArch64.h             |  2 +
 .../Target/AArch64/AArch64ClobberLRPass.cpp   | 71 +++++++++++++++++++
 .../Target/AArch64/AArch64TargetMachine.cpp   |  3 +
 llvm/lib/Target/AArch64/CMakeLists.txt        |  1 +
 llvm/test/CodeGen/AArch64/O0-pipeline.ll      |  1 +
 llvm/test/CodeGen/AArch64/O3-pipeline.ll      |  1 +
 6 files changed, 79 insertions(+)
 create mode 100644 llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp

diff --git a/llvm/lib/Target/AArch64/AArch64.h b/llvm/lib/Target/AArch64/AArch64.h
index ac765ebcddc0..c82a71cb971f 100644
--- a/llvm/lib/Target/AArch64/AArch64.h
+++ b/llvm/lib/Target/AArch64/AArch64.h
@@ -58,6 +58,7 @@ createAArch64InstructionSelector(const AArch64TargetMachine &,
 FunctionPass *createAArch64PreLegalizeCombiner(bool IsOptNone);
 FunctionPass *createAArch64StackTaggingPass(bool MergeInit);
 FunctionPass *createAArch64StackTaggingPreRAPass();
+FunctionPass *createAArch64ClobberLRPass();
 
 void initializeAArch64A53Fix835769Pass(PassRegistry&);
 void initializeAArch64A57FPLoadBalancingPass(PassRegistry&);
@@ -82,6 +83,7 @@ void initializeFalkorMarkStridedAccessesLegacyPass(PassRegistry&);
 void initializeLDTLSCleanupPass(PassRegistry&);
 void initializeAArch64StackTaggingPass(PassRegistry&);
 void initializeAArch64StackTaggingPreRAPass(PassRegistry&);
+void initializeAArch64ClobberLRPass(PassRegistry&);
 } // end namespace llvm
 
 #endif
diff --git a/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp b/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp
new file mode 100644
index 000000000000..91b1a5423275
--- /dev/null
+++ b/llvm/lib/Target/AArch64/AArch64ClobberLRPass.cpp
@@ -0,0 +1,71 @@
+//===- AArch64ClobberLRPass.cpp - Expand pseudo instructions --------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// This file contains a pass that sets LR as implicit-def for statepoints,
+// patchpoints and stackmap instrinsics. This is needed as these instructions
+// are defined globally with no knowledge of AArch64-specific requirements.
+// As these intrinsics are lowered to calls after the register allocator runs,
+// it is necessary to specify that they clobber the link register beforehand.
+//
+//===----------------------------------------------------------------------===//
+
+#include "AArch64.h"
+#include "AArch64RegisterInfo.h"
+#include "AArch64Subtarget.h"
+#include "llvm/CodeGen/MachineFunction.h"
+#include "llvm/CodeGen/MachineFunctionPass.h"
+#include "llvm/CodeGen/MachineInstr.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/Pass.h"
+
+using namespace llvm;
+
+#define DEBUG_TYPE "aarch64-dead-defs"
+
+#define AARCH64_CLOBBER_LR_NAME "AArch64 statepoint LR clobbering pass"
+
+namespace {
+struct AArch64ClobberLR : public MachineFunctionPass {
+public:
+  static char ID;
+
+  AArch64ClobberLR() : MachineFunctionPass(ID) {
+    initializeAArch64ClobberLRPass(*PassRegistry::getPassRegistry());
+  }
+
+  bool runOnMachineFunction(MachineFunction &MF) override;
+
+  StringRef getPassName() const override { return AARCH64_CLOBBER_LR_NAME; }
+};
+}
+
+char AArch64ClobberLR::ID = 0;
+
+INITIALIZE_PASS(AArch64ClobberLR, "aarch64-clobber-lr",
+                AARCH64_CLOBBER_LR_NAME, false, false)
+
+bool AArch64ClobberLR::runOnMachineFunction(MachineFunction &MF) {
+  auto TRI = MF.getSubtarget().getRegisterInfo();
+  bool Modified = false;
+  for (MachineBasicBlock &MBB : MF) {
+    for (MachineInstr &MI : MBB) {
+      if (MI.getOpcode() == TargetOpcode::STACKMAP ||
+        MI.getOpcode() == TargetOpcode::PATCHPOINT ||
+        MI.getOpcode() == TargetOpcode::STATEPOINT) {
+        MI.addRegisterDefined(AArch64::LR, TRI);
+        Modified = true;
+      }
+    }
+  }
+  return Modified;
+}
+
+FunctionPass *llvm::createAArch64ClobberLRPass() {
+  return new AArch64ClobberLR();
+}
\ No newline at end of file
diff --git a/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp b/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
index 115a7da8a6d9..a278994f4777 100644
--- a/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
+++ b/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp
@@ -185,6 +185,7 @@ extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeAArch64Target() {
   initializeAArch64SpeculationHardeningPass(*PR);
   initializeAArch64StackTaggingPass(*PR);
   initializeAArch64StackTaggingPreRAPass(*PR);
+  initializeAArch64ClobberLRPass(*PR);
 }
 
 //===----------------------------------------------------------------------===//
@@ -586,6 +587,8 @@ void AArch64PassConfig::addPreRegAlloc() {
     // be register coalescer friendly.
     addPass(&PeepholeOptimizerID);
   }
+
+  addPass(createAArch64ClobberLRPass());
 }
 
 void AArch64PassConfig::addPostRegAlloc() {
diff --git a/llvm/lib/Target/AArch64/CMakeLists.txt b/llvm/lib/Target/AArch64/CMakeLists.txt
index 103925d45d51..080b2feb08d3 100644
--- a/llvm/lib/Target/AArch64/CMakeLists.txt
+++ b/llvm/lib/Target/AArch64/CMakeLists.txt
@@ -29,6 +29,7 @@ add_llvm_target(AArch64CodeGen
   AArch64CallingConvention.cpp
   AArch64CallLowering.cpp
   AArch64CleanupLocalDynamicTLSPass.cpp
+  AArch64ClobberLRPass.cpp
   AArch64CollectLOH.cpp
   AArch64CondBrTuning.cpp
   AArch64ConditionalCompares.cpp
diff --git a/llvm/test/CodeGen/AArch64/O0-pipeline.ll b/llvm/test/CodeGen/AArch64/O0-pipeline.ll
index 9b7e2f6dd288..745647cb7344 100644
--- a/llvm/test/CodeGen/AArch64/O0-pipeline.ll
+++ b/llvm/test/CodeGen/AArch64/O0-pipeline.ll
@@ -53,6 +53,7 @@
 ; CHECK-NEXT:       AArch64 Instruction Selection
 ; CHECK-NEXT:       Finalize ISel and expand pseudo-instructions
 ; CHECK-NEXT:       Local Stack Slot Allocation
+; CHECK-NEXT:       AArch64 statepoint LR clobbering pass
 ; CHECK-NEXT:       Eliminate PHI nodes for register allocation
 ; CHECK-NEXT:       Two-Address instruction pass
 ; CHECK-NEXT:       Fast Register Allocator
diff --git a/llvm/test/CodeGen/AArch64/O3-pipeline.ll b/llvm/test/CodeGen/AArch64/O3-pipeline.ll
index bf489cbbae65..d710c5a115b2 100644
--- a/llvm/test/CodeGen/AArch64/O3-pipeline.ll
+++ b/llvm/test/CodeGen/AArch64/O3-pipeline.ll
@@ -118,6 +118,7 @@
 ; CHECK-NEXT:       Peephole Optimizations
 ; CHECK-NEXT:       Remove dead machine instructions
 ; CHECK-NEXT:       AArch64 Dead register definitions
+; CHECK-NEXT:       AArch64 statepoint LR clobbering pass
 ; CHECK-NEXT:       Detect Dead Lanes
 ; CHECK-NEXT:       Process Implicit Definitions
 ; CHECK-NEXT:       Remove unreachable machine basic blocks
-- 
2.31.1

