#
# Copyright (c) 2024, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to any
# person obtaining a copy of this software, associated documentation and/or
# data (collectively the "Software"), free of charge and under any and all
# copyright rights in the Software, and any and all patent rights owned or
# freely licensable by each licensor hereunder covering either (i) the
# unmodified Software as contributed to or provided by such licensor, or (ii)
# the Larger Works (as defined below), to deal in both
#
# (a) the Software, and
#
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
# one is included with the Software each a "Larger Work" to which the Software
# is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy, create
# derivative works of, display, perform, and distribute the Software and make,
# use, sell, offer for sale, import, export, have made, and have sold the
# Software and the Larger Work(s), and to sublicense the foregoing rights on
# either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or at a
# minimum a reference to the UPL must be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
name: Weekly Native Image Layer Building Tests

on:
  push:
    paths:
      - '.github/workflows/ni-layers.yml'
  pull_request:
    paths:
      - '.github/workflows/ni-layers.yml'
  schedule:
  - cron: "0 0 * * 1"
  workflow_dispatch:

env:
  LIBRARY_METADATA_PATH: ${{ github.workspace }}/vm/tests/gh_workflows/NILayerTests
  JAVA_VERSION: 21
  PYTHON_VERSION: 3.12.3

jobs:
  build-graalvm-and-populate-matrix:
    name: Build GraalVM and populate matrix
    runs-on: ubuntu-latest
    if: (github.repository=='oracle/graal')
    outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout oracle/graal
      uses: actions/checkout@v4
    - name: Build GraalVM JDK
      uses: ./.github/actions/build-graalvm
      with:
        native-images: 'native-image,native-image-configure,lib:native-image-agent'
        components: 'Native Image,Native Image Configure Tool'
        java-version: ${{ env.JAVA_VERSION }}
    - name: Tar GraalVM JDK
      shell: bash
      run: tar -czvhf graalvm.tgz -C $(dirname ${GRAALVM_HOME}) $(basename ${GRAALVM_HOME})
    - name: Persist GraalVM JDK build
      uses: actions/upload-artifact@v4
      with:
        name: graalvm
        path: graalvm.tgz
    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '${{ env.PYTHON_VERSION }}'
    - name: Populate matrix
      id: set-matrix
      run: python3 ${{ env.LIBRARY_METADATA_PATH }}/build_native_image_layer.py ${{ env.LIBRARY_METADATA_PATH }}/

  test-native-image-layer-build:
    name: ${{ matrix.coordinates }}
    runs-on: ubuntu-latest
    env:
      GRAALVM_HOME: ${{ github.workspace }}/graalvm
    timeout-minutes: 30
    needs:  build-graalvm-and-populate-matrix
    strategy:
      fail-fast: false
      matrix: 
        coordinates: ${{ fromJson(needs. build-graalvm-and-populate-matrix.outputs.matrix).coordinates }}
    steps:
      - name: Checkout oracle/graal
        uses: actions/checkout@v4
      - name: Download GraalVM JDK build
        uses: actions/download-artifact@v4
        with:
          name: graalvm
          path: .
      - name: Extract GraalVM JDK build
        run: tar -xzvf graalvm.tgz -C $(dirname ${GRAALVM_HOME})
      - name: "Setup JAVA_HOME"
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ env.PYTHON_VERSION }}'
      - name: Build layer
        run: |
            python3 ${{ env.LIBRARY_METADATA_PATH }}/build_native_image_layer.py ${{ env.GRAALVM_HOME }}/bin/native-image "${{ matrix.coordinates }}"
