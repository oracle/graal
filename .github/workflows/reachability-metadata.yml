#
# Copyright (c) 2024, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# The Universal Permissive License (UPL), Version 1.0
#
# Subject to the condition set forth below, permission is hereby granted to any
# person obtaining a copy of this software, associated documentation and/or
# data (collectively the "Software"), free of charge and under any and all
# copyright rights in the Software, and any and all patent rights owned or
# freely licensable by each licensor hereunder covering either (i) the
# unmodified Software as contributed to or provided by such licensor, or (ii)
# the Larger Works (as defined below), to deal in both
#
# (a) the Software, and
#
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
# one is included with the Software each a "Larger Work" to which the Software
# is contributed by such licensors),
#
# without restriction, including without limitation the rights to copy, create
# derivative works of, display, perform, and distribute the Software and make,
# use, sell, offer for sale, import, export, have made, and have sold the
# Software and the Larger Work(s), and to sublicense the foregoing rights on
# either these or other terms.
#
# This license is subject to the following condition:
#
# The above copyright notice and either this complete permission notice or at a
# minimum a reference to the UPL must be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
name: Weekly Reachability Metadata Tests

on:
  push:
    paths:
      - '.github/workflows/reachability-metadata.yml'
  pull_request:
    paths:
      - '.github/workflows/reachability-metadata.yml'
  schedule:
  - cron: '0 1 * * 1'
  workflow_dispatch:

env:
  REACHABILITY_METADATA_PATH: ${{ github.workspace }}/graalvm-reachability-metadata
  MINIMUM_METADATA_JAVA_VERSION: 17

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  build-graalvm-and-populate-matrix:
    name: Build GraalVM and populate matrix
    runs-on: ubuntu-20.04
    if: (github.event_name == 'schedule' && github.repository == 'oracle/graal') || (github.event_name != 'schedule')
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout oracle/graal
      uses: actions/checkout@v4
    - name: Build GraalVM JDK
      uses: ./.github/actions/build-graalvm
      with:
        native-images: 'native-image,native-image-configure,lib:native-image-agent'
        components: 'Native Image,Native Image Configure Tool'
        java-version: ${{ env.MINIMUM_METADATA_JAVA_VERSION }}
    - name: Tar GraalVM JDK
      shell: bash
      run: tar -czvhf graalvm.tgz -C $(dirname ${GRAALVM_HOME}) $(basename ${GRAALVM_HOME})
    - name: Persist GraalVM JDK build
      uses: actions/upload-artifact@v4
      with:
        name: graalvm
        path: graalvm.tgz
    - name: Checkout oracle/graalvm-reachability-metadata
      uses: actions/checkout@v4
      with:
        repository: oracle/graalvm-reachability-metadata
        path: ${{ env.REACHABILITY_METADATA_PATH }}
    - name: "Populate matrix"
      id: set-matrix
      run: |
        cd ${{ env.REACHABILITY_METADATA_PATH }}
        ./gradlew generateMatrixMatchingCoordinates -Pcoordinates=all

  test-all-metadata:
    name: ${{ matrix.coordinates }}
    runs-on: ubuntu-latest
    env:
      GRAALVM_HOME: ${{ github.workspace }}/graalvm # identical to the one in ./.github/actions/build-graalvm
    timeout-minutes: 20
    needs: build-graalvm-and-populate-matrix
    strategy:
        fail-fast: false
        matrix:
          coordinates: ${{fromJson(needs.build-graalvm-and-populate-matrix.outputs.matrix).coordinates}}
    steps:
      - name: "Checkout oracle/graalvm-reachability-metadata"
        uses: actions/checkout@v4
        with:
          repository: oracle/graalvm-reachability-metadata
      - name: Download GraalVM JDK build
        uses: actions/download-artifact@v4
        with:
          name: graalvm
          path: .
      - name: Extract GraalVM JDK build
        run: tar -xzvf graalvm.tgz -C $(dirname ${GRAALVM_HOME})
      - name: "Setup JAVA_HOME"
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: ${{ env.MINIMUM_METADATA_JAVA_VERSION }}
      - name: "Pull allowed docker images"
        run: |
          ./gradlew pullAllowedDockerImages --coordinates=${{ matrix.coordinates }}
      - name: "Disable docker"
        run: |
          sudo apt-get install openbsd-inetd
          sudo bash -c "cat ./.github/workflows/discard-port.conf >> /etc/inetd.conf"
          sudo systemctl start inetd
          sudo mkdir /etc/systemd/system/docker.service.d
          sudo bash -c "cat ./.github/workflows/dockerd.service > /etc/systemd/system/docker.service.d/http-proxy.conf"
          sudo systemctl daemon-reload
          sudo systemctl restart docker
      - name: "Run '${{ matrix.coordinates }}' tests"
        run: |
          ./gradlew test -Pcoordinates=${{ matrix.coordinates }}
    