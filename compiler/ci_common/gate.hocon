gateCmdSuffix : ["--kill-with-sigquit", "gate", "--strict-mode", "--extra-vm-argument=-Dgraal.DumpOnError=true -Dgraal.PrintGraphFile=true -Dgraal.PrintBackendCFG=true", "--extra-vm-argument=${EXTRA_VM_ARGS}", "--extra-unittest-argument=${EXTRA_UNITTEST_ARGS}", "--tags"]
gateCmd : ["mx", "--strict-compliance"] ${gateCmdSuffix}

graalWeekly: ${graal-weekly-notifications} {
  targets: ["weekly"]
  timelimit: "1:30:00"
}
graalDaily: ${graal-weekly-notifications} {
  targets: ["daily"]
  timelimit: "1:30:00"
}
gateTest : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,test"]
  ]
}

gateCoverage : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,coverage", --jacoco-omit-excluded, --jacocout, html]
    [mx, coverage-upload]
    # GR-18258 [mx, sonarqube-upload, "-Dsonar.host.url=$SONAR_HOST_URL", "-Dsonar.projectKey=com.oracle.graal.compiler."${jvm-config.default}, "-Dsonar.projectName=GraalVM - Compiler ("${jvm-config.default}")", --exclude-generated, --skip-coverage]
  ]
}

gateJavaBaseTest : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,javabasetest"]
  ]
}

gateTestMaxVS : ${gateTest} {
  environment : {
    EXTRA_VM_ARGS : "-Dgraal.DetailedAsserts=true -XX:MaxVectorSize=16"
  }
}

gateTestAVX0 : ${gateTest} {
  environment : {
    JVM_CONFIG    : ${jvm-config.default}"-avx0"
    EXTRA_VM_ARGS : "-Dgraal.ForceAdversarialLayout=true"
  }
}

gateTestAVX1 : ${gateTest} {
  environment : {
    JVM_CONFIG    : ${jvm-config.default}"-avx1"
    EXTRA_VM_ARGS : "-Dgraal.ForceAdversarialLayout=true"
  }
}

gateTestCompileImmediately : {
  environment : {
    EXTRA_VM_ARGS : "-Dpolyglot.engine.AllowExperimentalOptions=true -Dpolyglot.engine.CompileImmediately=true -Dpolyglot.engine.BackgroundCompilation=false -Dtck.inlineVerifierInstrument=false"
    EXTRA_UNITTEST_ARGS : "truffle"
  }
  run : [
    ${gateCmd} ["build,unittest"]
  ]
}

gateTestCTW : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    # At least one gate build should run without strict
    # compliance as that's how Travis runs on JDK9
    ["mx"] ${gateCmdSuffix} ["build,ctw"]
  ]
}

gateTestCTWWeekly : {
  environment : {
    # GR-23372
    EXTRA_VM_ARGS : "-DCompileTheWorld.MaxClasses=5000"
  }
  run : [
    # At least one gate build should run without strict
    # compliance as that's how Travis runs on JDK9
    ["mx"] ${gateCmdSuffix} ["build,ctw", "--jacoco-omit-excluded", "--jacocout", "html"]
    ["mx", "coverage-upload"]
  ]
  timelimit : "1:30:00"
}

gateTestBenchmark : {
  environment : {
    EXTRA_VM_ARGS : ""
    JVM_CONFIG    : ${jvm-config.default}
    JVM           : "server"
  }
  run : [
    ${gateCmd} ["build,benchmarktest"]
    # blackbox jmh test
    ["mx", "benchmark", "jmh-dist:GRAAL_COMPILER_MICRO_BENCHMARKS", "--", "-Djmh.ignoreLock=true", "--jvm-config=${JVM_CONFIG}", "--jvm=${JVM}", "--", ".*TestJMH.*" ]
    # whitebox jmh test
    ["mx", "benchmark", "jmh-whitebox:*", "--", "-Djmh.ignoreLock=true", "--jvm-config=${JVM_CONFIG}", "--jvm=${JVM}", "--", ".*TestJMH.*" ]
  ]
}

gateBootstrap : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,bootstrap"]
  ]
}

gateBootstrapLite : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,bootstraplite"]
  ]
}

gateBootstrapFullVerify : {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["build,bootstrapfullverify"]
  ]
}

gateStyle : ${eclipse} ${jdt} {
  environment : {
    EXTRA_VM_ARGS : ""
  }
  run : [
    ${gateCmd} ["style,fullbuild,javadoc"]
  ]
}

gateCommon : ${compilerCommon} {
  targets : [gate]
  logs: ${logPatterns}
}

gateLinuxAMD64 : ${linux-amd64} ${gateCommon}

gateDarwinAMD64 : ${darwin-amd64} ${gateCommon}

gateWindowsAMD64 : ${windows-amd64} ${gateCommon}

gateLinuxAArch64 : ${linux-aarch64} ${gateCommon}

gateLinuxAMD64AVX3 : ${gateLinuxAMD64} {
  capabilities : ["linux", "amd64", "x82"]
  environment : {
    JVM_CONFIG    : ${jvm-config.default}"-avx3"
  }
}

gateLinuxAMD64Bootstrap : ${gateLinuxAMD64} { capabilities : ${gateLinuxAMD64.capabilities} [manycores] }
gateDarwinAMD64Bootstrap : ${gateDarwinAMD64}
