/*
 * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package org.graalvm.compiler.nodeinfo;

/**
 * Constants denoting how a node is using an input node.
 */
public enum InputType {
    /**
     * Inputs that consume an actual value generated by the referenced node.
     */
    Value,
    /**
     * Inputs that consume the memory state of the referenced node.
     */
    Memory,
    /**
     * Inputs that reference a condition.
     */
    Condition,
    /**
     * Inputs that reference a frame state.
     */
    State,
    /**
     * Inputs that reference a guard (guards, begin nodes).
     */
    Guard,
    /**
     * Inputs that reference an anchor (begin nodes, value anchors).
     */
    Anchor,
    /**
     * Inputs that represent an association between nodes, e.g., a phi and the merge or a loop begin
     * and loop exits and ends.
     */
    Association,
    /**
     * Inputs that connect tightly coupled nodes, e.g., an InvokeNode and its CallTargetNode.
     */
    Extension,
    /**
     * Inputs of this type are temporarily exempt from type checking. This should only be used in
     * exceptional cases and should never survive to later stages of compilation.
     */
    Unchecked
}
