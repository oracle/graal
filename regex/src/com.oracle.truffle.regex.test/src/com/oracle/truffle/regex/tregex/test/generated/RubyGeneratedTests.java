/*
 * Copyright (c) 2025, 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.truffle.regex.tregex.test.generated;

import static com.oracle.truffle.regex.tregex.string.Encodings.UTF_8;
import static com.oracle.truffle.regex.tregex.test.generated.TestCase.match;
import static com.oracle.truffle.regex.tregex.test.generated.TestCase.noMatch;
import static com.oracle.truffle.regex.tregex.test.generated.TestCase.syntaxError;
import static com.oracle.truffle.regex.tregex.test.generated.TestCase.testCase;

import com.oracle.truffle.regex.RegexSyntaxException.ErrorCode;

public class RubyGeneratedTests {

    public static final TestCase[] TESTS = {
        // @formatter:off
        /* GENERATED CODE BEGIN - KEEP THIS MARKER FOR AUTOMATIC UPDATES */

        // Generated using Ruby version 3.4.5
        testCase("(?=.*c)a(()b?)?c", "", UTF_8, match("ac", 0, 0, 2, 1, 1, 1, 1)),
        testCase("(?=.*c)a(b*)?c", "", UTF_8, match("ac", 0, 0, 2, 1, 1)),
        testCase("(?=.*c)a(()b*)?c", "", UTF_8, match("ac", 0, 0, 2, 1, 1, 1, 1)),
        testCase("(?=.*b)a{2}", "", UTF_8, match("aaab", 0, 0, 2)),
        testCase("a{2}?", "", UTF_8, match("c", 0, 0, 0)),
        testCase("a{2,4}?", "", UTF_8, noMatch("c", 0)),
        testCase("a+?", "", UTF_8, noMatch("c", 0)),
        testCase("a{2}?(b)?c", "", UTF_8, match("c", 0, 0, 1, -1, -1)),
        testCase("(?>(aa)?)+", "", UTF_8, match("a", 0, 0, 0, -1, -1)),
        testCase("(|a+?){0,4}b", "", UTF_8, match("aaab", 0, 0, 4, 1, 3)),
        testCase("(a{2}|())+$", "", UTF_8, match("aaaa", 0, 0, 4, 4, 4, 4, 4)),
        testCase("^a(b*)\\1{4,6}?", "", UTF_8,
            match("abbbb", 0, 0, 1, 1, 1),
            match("abbbbb", 0, 0, 6, 1, 2)),
        testCase("a(?:c|b(?=()))*", "", UTF_8, match("abc", 0, 0, 3, 2, 2)),
        testCase("a(?:c|b(?=(c)))*", "", UTF_8, match("abc", 0, 0, 3, 2, 3)),
        testCase("a(?:c|(?<=(a))b)*", "", UTF_8, match("abc", 0, 0, 3, 0, 1)),
        testCase("\\Z", "", UTF_8, match("\r", 0, 1, 1)),
        testCase("(?<=\\A)", "", UTF_8, match("\r", 0, 0, 0)),
        testCase("(?<=\\b)", "", UTF_8, noMatch("\r", 0)),
        testCase("(?<=\\B)", "", UTF_8, match("\r", 0, 0, 0)),
        testCase("(?<=+?)", "", UTF_8, syntaxError(ErrorCode.InvalidQuantifier)),
        testCase("(?<=)", "", UTF_8, match("empty", 0, 0, 0)),
        testCase("()?", "", UTF_8, match("", 0, 0, 0, 0, 0)),
        testCase("(a*)?", "", UTF_8, match("", 0, 0, 0, 0, 0)),
        testCase("(a*)*", "", UTF_8, match("", 0, 0, 0, 0, 0)),
        testCase("(?:a|()){50,100}", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 50, 50, 50)),
        testCase("()??", "", UTF_8, match("", 0, 0, 0, -1, -1)),
        testCase("(a*?)?", "", UTF_8, match("", 0, 0, 0, 0, 0)),
        testCase("(a*)??", "", UTF_8, match("", 0, 0, 0, -1, -1)),
        testCase("(a*?)??", "", UTF_8, match("", 0, 0, 0, -1, -1)),
        testCase("(a*?)*", "", UTF_8, match("", 0, 0, 0, 0, 0)),
        testCase("(a*)*?", "", UTF_8, match("", 0, 0, 0, -1, -1)),
        testCase("(a*?)*?", "", UTF_8, match("", 0, 0, 0, -1, -1)),
        testCase("(a|\\2b|())*", "", UTF_8, match("aaabbb", 0, 0, 6, 6, 6, 6, 6)),
        testCase("(a|\\2b|()){2,4}", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, 3, 3)),
        testCase("(a|\\2b|\\3()|())*", "", UTF_8, match("aaabbb", 0, 0, 6, 6, 6, 6, 6, 3, 3)),
        testCase("(a|\\2b|\\3()|()){2,4}", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, -1, -1, 3, 3)),
        testCase("(a|\\2b|()){20,24}", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaabbbbb", 0, 0, 23, 22, 23, 20, 20)),
        testCase("(a|\\2b|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1)),
        testCase("(a|\\2b|\\3()|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("(?:|a)*", "", UTF_8, match("aaa", 0, 0, 0)),
        testCase("(?:()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("(|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("(()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()\\1(?:|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()\\1(?:()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()\\1(|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()\\1(()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(?:\\1|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()(?:()\\1|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(?:(\\1)|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(?:\\1()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(\\1|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(()\\1|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0, 0, 0)),
        testCase("()((\\1)|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0, 0, 0)),
        testCase("()(\\1()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0, 0, 0)),
        testCase("(?:(?=a)|a)*", "", UTF_8, match("aaa", 0, 0, 0)),
        testCase("(?:(?=a)()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("(?:()(?=a)|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("(?:((?=a))|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()\\1(?:(?=a)|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()\\1(?:(?=a)()|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()\\1(?:()(?=a)|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("()\\1(?:((?=a))|a)*", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("(?:|a)*?", "", UTF_8, match("aaa", 0, 0, 0)),
        testCase("(?:()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1)),
        testCase("(|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1)),
        testCase("(()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1, -1, -1)),
        testCase("()\\1(?:|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()\\1(?:()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()\\1(|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()\\1(()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1, -1, -1)),
        testCase("()(?:\\1|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()(?:()\\1|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()(?:(\\1)|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()(?:\\1()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()(\\1|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()(()\\1|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1, -1, -1)),
        testCase("()((\\1)|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1, -1, -1)),
        testCase("()(\\1()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1, -1, -1)),
        testCase("(?:(?=a)|a)*?", "", UTF_8, match("aaa", 0, 0, 0)),
        testCase("(?:(?=a)()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1)),
        testCase("(?:()(?=a)|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1)),
        testCase("(?:((?=a))|a)*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1)),
        testCase("()\\1(?:(?=a)|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0)),
        testCase("()\\1(?:(?=a)()|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()\\1(?:()(?=a)|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("()\\1(?:((?=a))|a)*?", "", UTF_8, match("aaa", 0, 0, 0, 0, 0, -1, -1)),
        testCase("(|a|\\2b|())*", "", UTF_8, match("aaabbb", 0, 0, 0, 0, 0, -1, -1)),
        testCase("(a||\\2b|())*", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, -1, -1)),
        testCase("(a|\\2b||())*", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, -1, -1)),
        testCase("(a|\\2b|()|)*", "", UTF_8, match("aaabbb", 0, 0, 6, 6, 6, 6, 6)),
        testCase("(()|a|\\3b|())*", "", UTF_8, match("aaabbb", 0, 0, 0, 0, 0, 0, 0, -1, -1)),
        testCase("(a|()|\\3b|())*", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, 3, 3, -1, -1)),
        testCase("(a|\\2b|()|())*", "", UTF_8, match("aaabbb", 0, 0, 6, 6, 6, 6, 6, -1, -1)),
        testCase("(a|\\3b|()|())*", "", UTF_8, match("aaabbb", 0, 0, 3, 3, 3, 3, 3, -1, -1)),
        testCase("(a|()|())*", "", UTF_8, match("aaa", 0, 0, 3, 3, 3, 3, 3, -1, -1)),
        testCase("^(()|a|())*$", "", UTF_8, match("aaa", 0, 0, 3, 3, 3, 3, 3, -1, -1)),
        testCase("(|a|\\2b|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1)),
        testCase("(a||\\2b|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1)),
        testCase("(a|\\2b||())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1)),
        testCase("(a|\\2b|()|)*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1)),
        testCase("(()|a|\\3b|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("(a|()|\\3b|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("(a|\\2b|()|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("(a|\\3b|()|())*?", "", UTF_8, match("aaabbb", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("(a|()|())*?", "", UTF_8, match("aaa", 0, 0, 0, -1, -1, -1, -1, -1, -1)),
        testCase("^(()|a|())*?$", "", UTF_8, match("aaa", 0, 0, 3, 2, 3, 2, 2, -1, -1)),
        testCase("((A|){7,10}?){10,17}", "", UTF_8, match("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 0, 0, 86, 86, 86, 86, 86)),
        testCase("(a{1,30}){1,4}", "", UTF_8, match("a", 0, 0, 1, 0, 1)),
        testCase("((a|){4,6}){4,6}", "", UTF_8,
            match("a", 0, 0, 1, 1, 1, 1, 1),
            match("aa", 0, 0, 2, 2, 2, 2, 2),
            match("aaa", 0, 0, 3, 3, 3, 3, 3),
            match("aaaa", 0, 0, 4, 4, 4, 4, 4),
            match("aaaaa", 0, 0, 5, 5, 5, 5, 5),
            match("aaaaaa", 0, 0, 6, 6, 6, 6, 6),
            match("aaaaaaa", 0, 0, 7, 7, 7, 7, 7),
            match("aaaaaaaa", 0, 0, 8, 8, 8, 8, 8),
            match("aaaaaaaaa", 0, 0, 9, 9, 9, 9, 9),
            match("aaaaaaaaaa", 0, 0, 10, 10, 10, 10, 10),
            match("aaaaaaaaaaa", 0, 0, 11, 11, 11, 11, 11),
            match("aaaaaaaaaaaa", 0, 0, 12, 12, 12, 12, 12),
            match("aaaaaaaaaaaaa", 0, 0, 13, 13, 13, 13, 13)),
        testCase("((a?){4,6}){4,6}", "", UTF_8,
            match("aaaaaaa", 0, 0, 7, 7, 7, 7, 7),
            match("aaaaaa", 0, 0, 6, 6, 6, 6, 6)),
        testCase("((|a){4,6}){4,6}", "", UTF_8,
            match("a", 0, 0, 0, 0, 0, 0, 0),
            match("aa", 0, 0, 0, 0, 0, 0, 0),
            match("aaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaaaaaa", 0, 0, 0, 0, 0, 0, 0),
            match("aaaaaaaaaaaaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("((a??){4,6}){4,6}", "", UTF_8, match("aaaaaaa", 0, 0, 0, 0, 0, 0, 0)),
        testCase("(a|){4,6}", "", UTF_8,
            match("a", 0, 0, 1, 1, 1),
            match("aa", 0, 0, 2, 2, 2),
            match("aaa", 0, 0, 3, 3, 3),
            match("aaaa", 0, 0, 4, 4, 4),
            match("aaaaa", 0, 0, 5, 5, 5),
            match("aaaaaa", 0, 0, 6, 5, 6),
            match("aaaaaaa", 0, 0, 6, 5, 6)),
        testCase("(a|){4,6}?", "", UTF_8,
            match("a", 0, 0, 1, 1, 1),
            match("aa", 0, 0, 2, 2, 2),
            match("aaa", 0, 0, 3, 3, 3),
            match("aaaa", 0, 0, 4, 3, 4),
            match("aaaaa", 0, 0, 4, 3, 4),
            match("aaaaaa", 0, 0, 4, 3, 4),
            match("aaaaaaa", 0, 0, 4, 3, 4)),
        testCase("(a|){4,6}?a", "", UTF_8,
            match("a", 0, 0, 1, 0, 0),
            match("aa", 0, 0, 2, 1, 1),
            match("aaa", 0, 0, 3, 2, 2),
            match("aaaa", 0, 0, 4, 3, 3),
            match("aaaaa", 0, 0, 5, 3, 4),
            match("aaaaaa", 0, 0, 5, 3, 4),
            match("aaaaaaa", 0, 0, 5, 3, 4),
            match("aaaaaaaa", 0, 0, 5, 3, 4)),
        testCase("(|a){4,6}a", "", UTF_8,
            match("a", 0, 0, 1, 0, 0),
            match("aa", 0, 0, 1, 0, 0),
            match("aaa", 0, 0, 1, 0, 0),
            match("aaaa", 0, 0, 1, 0, 0),
            match("aaaaa", 0, 0, 1, 0, 0),
            match("aaaaaa", 0, 0, 1, 0, 0),
            match("aaaaaaa", 0, 0, 1, 0, 0)),
        testCase("((a|){4,6}?){4,6}", "", UTF_8,
            match("a", 0, 0, 1, 1, 1, 1, 1),
            match("aa", 0, 0, 2, 2, 2, 2, 2),
            match("aaa", 0, 0, 3, 3, 3, 3, 3),
            match("aaaa", 0, 0, 4, 4, 4, 4, 4),
            match("aaaaa", 0, 0, 5, 5, 5, 5, 5),
            match("aaaaaa", 0, 0, 6, 6, 6, 6, 6),
            match("aaaaaaaa", 0, 0, 8, 8, 8, 8, 8),
            match("aaaaaaaaa", 0, 0, 9, 9, 9, 9, 9),
            match("aaaaaaaaaa", 0, 0, 10, 10, 10, 10, 10),
            match("aaaaaaaaaaa", 0, 0, 11, 11, 11, 11, 11),
            match("aaaaaaaaaaaa", 0, 0, 12, 12, 12, 12, 12),
            match("aaaaaaaaaaaaa", 0, 0, 13, 13, 13, 13, 13),
            match("aaaaaaaaaaaaaa", 0, 0, 14, 14, 14, 14, 14),
            match("aaaaaaaaaaaaaaa", 0, 0, 15, 15, 15, 15, 15),
            match("aaaaaaaaaaaaaaaa", 0, 0, 16, 16, 16, 16, 16),
            match("aaaaaaaaaaaaaaaaa", 0, 0, 17, 17, 17, 17, 17),
            match("aaaaaaaaaaaaaaaaaa", 0, 0, 18, 18, 18, 18, 18)),
        testCase("((a){4,6}?){4,6}", "", UTF_8,
            noMatch("a", 0),
            noMatch("aa", 0),
            noMatch("aaa", 0),
            noMatch("aaaa", 0),
            noMatch("aaaaa", 0),
            noMatch("aaaaaa", 0),
            match("aaaaaaaaaaaaaaaa", 0, 0, 16, 12, 16, 15, 16),
            match("aaaaaaaaaaaaaaaaa", 0, 0, 16, 12, 16, 15, 16),
            match("aaaaaaaaaaaaaaaaaaaa", 0, 0, 20, 16, 20, 19, 20),
            match("aaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 24, 20, 24, 23, 24),
            match("aaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 24, 20, 24, 23, 24)),
        testCase("((a){4,6}){4,6}", "", UTF_8,
            noMatch("a", 0),
            noMatch("aa", 0),
            noMatch("aaa", 0),
            noMatch("aaaa", 0),
            noMatch("aaaaa", 0),
            noMatch("aaaaaa", 0),
            match("aaaaaaaaaaaaaaaa", 0, 0, 16, 12, 16, 15, 16),
            match("aaaaaaaaaaaaaaaaa", 0, 0, 17, 13, 17, 16, 17),
            match("aaaaaaaaaaaaaaaaaaaa", 0, 0, 20, 16, 20, 19, 20),
            match("aaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 24, 18, 24, 23, 24),
            match("aaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 24, 18, 24, 23, 24)),
        testCase("((a){4,}){4,6}", "", UTF_8,
            noMatch("a", 0),
            noMatch("aa", 0),
            noMatch("aaa", 0),
            noMatch("aaaa", 0),
            noMatch("aaaaa", 0),
            noMatch("aaaaaa", 0),
            match("aaaaaaaaaaaaaaaa", 0, 0, 16, 12, 16, 15, 16),
            match("aaaaaaaaaaaaaaaaa", 0, 0, 17, 13, 17, 16, 17),
            match("aaaaaaaaaaaaaaaaaaaa", 0, 0, 20, 16, 20, 19, 20),
            match("aaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 24, 20, 24, 23, 24),
            match("aaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 25, 21, 25, 24, 25)),
        testCase("(.)\\1{2,}", "", UTF_8, noMatch("billiam", 0)),
        testCase("(^_(a{1,2}[:])*a{1,2}[:]a{1,2}([.]a{1,4})?_)+", "", UTF_8, match("_a:a:a.aaa_", 0, 0, 11, 0, 11, 1, 3, 6, 10)),
        testCase("(?<=|$)", "", UTF_8, match("a", 0, 0, 0)),
        testCase("(?=ab)a", "", UTF_8, match("ab", 0, 0, 1)),
        testCase("(?=()|^)|x", "", UTF_8, match("empty", 0, 0, 0, 0, 0)),
        testCase("a(?<=ba)", "", UTF_8, match("ba", 0, 1, 2)),
        testCase("(?<=(?<=a)[])", "i", UTF_8, syntaxError(ErrorCode.InvalidCharacterClass)),
        testCase("\\d\\W", "i", UTF_8, match("4\u017f", 0, 0, 3)),
        testCase("[\u08bc-\ucf3a]", "i", UTF_8, match("\u03b0", 0, 0, 2)),
        testCase("[\u0450-\u6c50]\u7e57\u55ad()\u64e7\\d|", "i", UTF_8, match("\u03b0\u7e57\u55ad\u64e79", 0, 0, 12, 8, 8)),
        testCase("(?<=(?<=a)b^c)c", "", UTF_8, noMatch("abcc", 0)),
        testCase("a(?:|()\\1){1,2}", "", UTF_8, match("a", 0, 0, 1, -1, -1)),
        testCase("[a-z][a-z\u2028\u2029].|ab(?<=[a-z]w.)", "", UTF_8, match("aac", 0, 0, 3)),
        testCase("(animation|animation-name)", "", UTF_8, match("animation", 0, 0, 9, 0, 9)),
        testCase("(a|){7,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(a|){7,7}?b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(|a){7,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(|a){7,7}?b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(a||b){7,7}c", "", UTF_8,
            match("aaabc", 0, 0, 5, 4, 4),
            match("aaac", 0, 0, 4, 3, 3),
            match("aaabac", 0, 0, 6, 5, 5)),
        testCase("($|a){7,7}", "", UTF_8, match("aaa", 0, 0, 3, 3, 3)),
        testCase("($|a){7,7}?", "", UTF_8, match("aaa", 0, 0, 3, 3, 3)),
        testCase("(a|$){7,7}", "", UTF_8, match("aaa", 0, 0, 3, 3, 3)),
        testCase("(a|$){7,7}?", "", UTF_8, match("aaa", 0, 0, 3, 3, 3)),
        testCase("(a|$|b){7,7}", "", UTF_8,
            match("aaab", 0, 0, 4, 4, 4),
            match("aaa", 0, 0, 3, 3, 3),
            match("aaaba", 0, 0, 5, 5, 5)),
        testCase("((?=a)|a){7,7}b", "", UTF_8, noMatch("aaa", 0)),
        testCase("((?=[ab])|a){7,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("((?<=a)|a){7,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("a((?<=a)|a){7,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(a|){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(a|){0,7}?b", "", UTF_8, match("aaab", 0, 0, 4, 2, 3)),
        testCase("(|a){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(|a){0,7}?b", "", UTF_8, match("aaab", 0, 0, 4, 2, 3)),
        testCase("(a||b){0,7}c", "", UTF_8,
            match("aaabc", 0, 0, 5, 4, 4),
            match("aaac", 0, 0, 4, 3, 3),
            match("aaabac", 0, 0, 6, 5, 5)),
        testCase("((?=a)|a){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 2, 3)),
        testCase("((?=[ab])|a){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("((?<=a)|a){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("a((?<=a)|a){0,7}b", "", UTF_8, match("aaab", 0, 0, 4, 3, 3)),
        testCase("(a*){11,11}b", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaab", 0, 0, 26, 25, 25)),
        testCase("(?:a(b{0,19})c)", "", UTF_8, match("abbbbbbbcdebbbbbbbf", 0, 0, 9, 1, 8)),
        testCase("(?:a(b{0,19})c)de", "", UTF_8, match("abbbbbbbcdebbbbbbbf", 0, 0, 11, 1, 8)),
        testCase("[\ud0d9](?<=\\S)", "", UTF_8, match("\ud0d9", 0, 0, 3)),
        testCase("[\ud0d9](?<=\\W)", "", UTF_8, match("\ud0d9", 0, 0, 3)),
        testCase("\u0895(?<=\\S)", "", UTF_8, match("\u0895", 0, 0, 3)),
        testCase("\u0895(?<=\\W)", "", UTF_8, match("\u0895", 0, 0, 3)),
        testCase("[\u8053](?<=\\S)", "", UTF_8, match("\u8053", 0, 0, 3)),
        testCase("[\u8053](?<=\\W)", "", UTF_8, match("\u8053", 0, 0, 3)),
        testCase("\u0895|[\u8053\ud0d9]+(?<=\\S\\W\\S)", "", UTF_8, match("\ud0d9\ud0d9\ud0d9\ud0d9", 0, 0, 12)),
        testCase("a|[bc]+(?<=[abc][abcd][abc])", "", UTF_8, match("bbbb", 0, 0, 4)),
        testCase("a(b*)*c\\1d", "", UTF_8, match("abbbbcbbd", 0, 0, 9, 3, 5)),
        testCase("(|a)||b(?<=cde)|", "", UTF_8, match("a", 0, 0, 0, 0, 0)),
        testCase("^(\\1)?\\D*", "", UTF_8, match("empty", 0, 0, 5, -1, -1)),
        testCase("abcd(?<=d|c()d)", "", UTF_8, match("_abcd", 0, 1, 5, -1, -1)),
        testCase("\\Dw\u3aa7\\A\\S(?<=\ue3b3|\\A()\\S)", "", UTF_8, noMatch("\udad1\udcfaw\u3aa7A\ue3b3", 0)),
        testCase("(a||b){15,18}c", "", UTF_8, match("ababaabbaaac", 0, 0, 12, 11, 11)),
        testCase("(a||b){15,18}?c", "", UTF_8, match("ababaabbaaac", 0, 0, 12, 10, 11)),
        testCase("(?:ab|c|^){103,104}", "", UTF_8, match("abcababccabccabababccabcababcccccabcababababccccabcabcabccabcabcccabababccabababcababababccababccabcababcabcabccabababccccabcab", 0, 0, 0)),
        testCase("((?<=a)bec)*d", "", UTF_8, match("abecd", 0, 1, 5, 1, 4)),
        testCase("(|(^|\\z){2,77}?)?", "", UTF_8, match("empty", 0, 0, 0, 0, 0, -1, -1)),
        testCase("a(|a{15,36}){10,11}", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 1, 1, 1)),
        testCase("a(|a{15,36}?){10,11}", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 1, 1, 1)),
        testCase("a(|a{15,36}){10,11}$", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 0, 66, 66, 66)),
        testCase("a(|a{15,36}?){10,11}b$", "", UTF_8, match("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab", 0, 0, 67, 66, 66)),
        testCase("(?:a()|b??){22,26}c", "", UTF_8, match("aabbbaabaaaaaabaaaac", 0, 0, 20, 19, 19)),
        testCase("b()(a\\1|){4,4}\\2c", "", UTF_8, match("baaaac", 0, 0, 6, 1, 1, 3, 4)),
        testCase("a((?=b()|)[a-d])+", "", UTF_8, match("abbbcbd", 0, 0, 7, 6, 7, 6, 6)),
        testCase("a(|b){5,7}c", "", UTF_8, match("abbbc", 0, 0, 5, 4, 4)),
        testCase("a(|b){5,8}c", "", UTF_8, match("abbbc", 0, 0, 5, 4, 4)),
        testCase("a(|b){5,9}c", "", UTF_8, match("abbbc", 0, 0, 5, 4, 4)),
        testCase("a(|b){5,}c", "", UTF_8, match("abbbc", 0, 0, 5, 4, 4)),
        testCase("a((?<=a)|b){5,7}c", "", UTF_8, noMatch("abbbc", 0)),
        testCase("a((?<=a)|b){5,8}c", "", UTF_8, noMatch("abbbc", 0)),
        testCase("a((?<=a)|b){5,9}c", "", UTF_8, noMatch("abbbc", 0)),
        testCase("a((?<=a)|b){5,}c", "", UTF_8, noMatch("abbbc", 0)),
        testCase("[ab]*?\\Z(?<=[^b][ab][^b])", "", UTF_8, match("aaaaaa", 0, 0, 6)),
        testCase("(?<=a(b){3,3}?)", "", UTF_8, match("abbb", 0, 4, 4, 3, 4)),
        testCase("\\A(?<seg>(?:%\\h\\h|[!$&-.0-9:;=@A-Z_a-z~/])){0}((?!/)\\g<seg>++)\\z", "x", UTF_8, match("ftp://example.com/%2Ffoo", 0, 0, 24, 23, 24)),

        /* GENERATED CODE END - KEEP THIS MARKER FOR AUTOMATIC UPDATES */
        // @formatter:on
    };
}
