Reports all reflection (e.g., Class#forName(String)) and resource (e.g., Class#getResource(String)) calls in reachable code that require metadata for dynamic access.
The analysis is limited to the provided comma-separated list of class-path entries, and module or package names.
If any dynamic access calls are found, a "dynamic-access" directory is created in the native image output,
and the calls are serialized in "dynamic-access/<entry-name>/[reflection-calls.json][resource-calls.json]".

Usage: -H:TrackDynamicAccess=[all|none|to-console|no-dump|path=<cp-entry>|module=<module>|package=<package>][,...]

The flag can be used in following ways:
1. -H:TrackDynamicAccess=all reports all dynamic access calls made across the entire project
2. -H:TrackDynamicAccess=path=<cp-entry> reports all dynamic access calls made from the specified class-path entry
3. -H:TrackDynamicAccess=module=<module> reports all dynamic access calls made from the specified module
4. -H:TrackDynamicAccess=package=<package> reports all dynamic access calls made from the specified package
5. -H:TrackDynamicAccess=none disables all previous selections for dynamic access detection
6. -H:TrackDynamicAccess=to-console outputs all detected dynamic access calls to the console
7. -H:TrackDynamicAccess=no-dump disables the serialization of detected dynamic access calls
8. A comma-separated list of the previous cases. For example, -H:TrackDynamicAccess=path=<cp-entry>,module=<module>,package=<package>

Example of the option usage:

    native-image -cp lib/app.jar:lib/util.jar:lib/tck.jar -H:TrackDynamicAccess=path=lib/app.jar,path=lib/util.jar HelloWorld

    In this example, the phase will look for dynamic access calls in lib/app.jar and lib/util.jar, and will not detect any calls in lib/tck.jar.
