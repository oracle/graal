/*
 * Copyright (c) 2023, 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.svm.preview.panama.core;

import static com.oracle.svm.core.util.VMError.unsupportedFeature;

import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.invoke.MethodType;
import java.util.Arrays;
import java.util.stream.Stream;

import org.graalvm.nativeimage.ImageSingletons;

import com.oracle.svm.core.SubstrateTargetDescription;
import com.oracle.svm.core.SubstrateUtil;
import com.oracle.svm.core.graal.code.AssignedLocation;

import jdk.internal.foreign.CABI;
import jdk.internal.foreign.abi.Binding;
import jdk.internal.foreign.abi.CallingSequence;
import jdk.internal.foreign.abi.CapturableState;
import jdk.internal.foreign.abi.LinkerOptions;
import jdk.internal.foreign.abi.VMStorage;
import jdk.internal.foreign.abi.x64.X86_64Architecture;
import jdk.vm.ci.amd64.AMD64;
import jdk.vm.ci.code.Register;
import jdk.vm.ci.meta.JavaKind;
import jdk.vm.ci.meta.PlatformKind;

public abstract class AbiUtils {

    public static AbiUtils getInstance() {
        /*
         * CABI being both 1) internal 2) currently getting implemented, the values of the enum
         * might change quickly; thus, a default seems like a must for now.
         */
        return switch (CABI.current()) {
            case SYS_V -> ABIs.SysV;
            case WIN_64 -> ABIs.Win64;
            default -> throw unsupportedFeature("Foreign functions are not yet supported on " + CABI.current() + ".");
        };
    }

    /**
     * This method re-implements a part of the logic from the JDK so that we can get the callee-type
     * (i.e. C type) of a function from its descriptor. Note that this process is ABI (i.e.
     * architecture and OS) dependant.
     */
    public abstract NativeEntryPointInfo makeEntrypoint(FunctionDescriptor desc, Linker.Option... options);

    /**
     * Generate a register allocation for SubstrateVM from the one generated by and for Panama
     * Foreign/HotSpot.
     */
    public abstract AssignedLocation[] toMemoryAssignment(VMStorage[] moves, boolean forReturn);

    public abstract int supportedCaptureMask();
}

class ABIs {
    private abstract static class X86_64 extends AbiUtils {
        protected static Stream<Binding.VMStore> argMoveBindingsStream(CallingSequence callingSequence) {
            return callingSequence.argumentBindings()
                            .filter(Binding.VMStore.class::isInstance)
                            .map(Binding.VMStore.class::cast);
        }

        protected static Stream<Binding.VMLoad> retMoveBindingsStream(CallingSequence callingSequence) {
            return callingSequence.returnBindings().stream()
                            .filter(Binding.VMLoad.class::isInstance)
                            .map(Binding.VMLoad.class::cast);
        }

        protected static Binding.VMLoad[] retMoveBindings(CallingSequence callingSequence) {
            return retMoveBindingsStream(callingSequence).toArray(Binding.VMLoad[]::new);
        }

        protected VMStorage[] toStorageArray(Binding.Move[] moves) {
            return Arrays.stream(moves).map(Binding.Move::storage).toArray(VMStorage[]::new);
        }

        protected abstract CallingSequence makeCallingSequence(MethodType type, FunctionDescriptor desc, boolean forUpcall, LinkerOptions options);

        private static boolean windowsAllowedMismatch(AMD64 target, Register.RegisterCategory rc, PlatformKind kind) {
            return rc.equals(AMD64.CPU) && (kind.equals(target.getPlatformKind(JavaKind.Float)) || kind.equals(target.getPlatformKind(JavaKind.Double)));
        }

        private static boolean typeMatchRegister(AMD64 target, Class<?> type, Register register, boolean weak) {
            Register.RegisterCategory rc = register.getRegisterCategory();
            PlatformKind kind = target.getPlatformKind(JavaKind.fromJavaClass(type));
            return target.canStoreValue(rc, kind) ||
                            (weak && windowsAllowedMismatch(target, rc, kind));
        }

        private static void methodTypeMatchAssignment(int savedValueMask, MethodType methodType, AssignedLocation[] assignments, AssignedLocation[] returnAssignment, FunctionDescriptor fd,
                        Linker.Option... options) {
            if (!SubstrateUtil.assertionsEnabled()) {
                return;
            }

            int firstActualArgument = 0;
            if (methodType.parameterType(firstActualArgument++) != long.class) {
                throw new AssertionError("Address expected as first param: " + methodType);
            }
            if (returnAssignment != null && methodType.parameterType(firstActualArgument++) != long.class) {
                throw new AssertionError("Return buffer address expected: " + methodType);
            }
            if (savedValueMask != 0 && methodType.parameterType(firstActualArgument++) != long.class) {
                throw new AssertionError("Capture buffer address expected: " + methodType);
            }

            assert firstActualArgument + assignments.length == methodType.parameterCount() : assignments.length + " " + methodType.parameterCount();
            AMD64 target = (AMD64) ImageSingletons.lookup(SubstrateTargetDescription.class).arch;
            boolean weak = LinkerOptions.forDowncall(fd, options).isVariadicFunction();

            for (int i = 0; i < assignments.length; ++i) {
                var type = methodType.parameterType(firstActualArgument + i);
                var assignment = assignments[i];
                assert !assignment.assignsToRegister() ||
                                typeMatchRegister(target, type, assignment.register(), weak) : "Cannot put %s in %s.\nDescriptor & options: %s %s\nAssignment: %s\nMethod type (placeholders: %d): %s"
                                                .formatted(type, assignment.register(), fd, Arrays.toString(options), Arrays.toString(assignments), firstActualArgument, methodType);
            }

            assert returnAssignment == null || methodType.returnType().equals(void.class);
        }

        @Override
        public NativeEntryPointInfo makeEntrypoint(FunctionDescriptor desc, Linker.Option... options) {
            // Linker.downcallHandle implemented in
            // AbstractLinker.downcallHandle

            // AbstractLinker.downcallHandle0
            LinkerOptions optionSet = LinkerOptions.forDowncall(desc, options);
            MethodType type = desc.toMethodType();

            /* OS SPECIFIC BEGINS */
            // AbstractLinker.arrangeDowncall implemented in
            // SysVx64Linker.arrangeDowncall or Windowsx64Linker.arrangeDowncall

            // CallArranger.arrangeDowncall
            var callingSequence = makeCallingSequence(type, desc, false, optionSet);
            /* OS SPECIFIC ENDS */

            // From DowncallLinker.getBoundMethodHandle
            var argMoves = toStorageArray(argMoveBindingsStream(callingSequence).toArray(Binding.VMStore[]::new));
            var returnMoves = toStorageArray(retMoveBindings(callingSequence));
            var boundaryType = callingSequence.calleeMethodType();
            var needsReturnBuffer = callingSequence.needsReturnBuffer();

            // From NativeEntrypoint.make
            var parametersAssignment = toMemoryAssignment(argMoves, false);
            var returnBuffering = needsReturnBuffer ? toMemoryAssignment(returnMoves, true) : null;
            methodTypeMatchAssignment(callingSequence.capturedStateMask(), boundaryType, parametersAssignment, returnBuffering, desc, options);
            return new NativeEntryPointInfo(boundaryType, parametersAssignment, returnBuffering, callingSequence.capturedStateMask(), callingSequence.needsTransition());
        }

        @Override
        public AssignedLocation[] toMemoryAssignment(VMStorage[] argMoves, boolean forReturn) {
            int size = 0;
            for (VMStorage move : argMoves) {
                if (move.type() != X86_64Architecture.StorageType.PLACEHOLDER) {
                    // Placeholders are ignored; they will be handled further down the line
                    ++size;
                } else {
                    // Placeholders are expected to be prefix arguments
                    assert size == 0;
                }

                if (move.type() == X86_64Architecture.StorageType.X87) {
                    throw unsupportedFeature("Unsupported register kind: X87");
                } else if (move.type() == X86_64Architecture.StorageType.STACK && forReturn) {
                    throw unsupportedFeature("Unsupported register kind for return: STACK");
                }
            }

            AssignedLocation[] storages = new AssignedLocation[size];
            int i = 0;
            for (VMStorage move : argMoves) {
                if (move.type() != X86_64Architecture.StorageType.PLACEHOLDER) {
                    storages[i++] = switch (move.type()) {
                        case X86_64Architecture.StorageType.INTEGER -> {
                            Register reg = AMD64.cpuRegisters[move.indexOrOffset()];
                            assert reg.name.equals(move.debugName());
                            assert reg.getRegisterCategory().equals(AMD64.CPU);
                            yield AssignedLocation.toRegister(reg);
                        }
                        case X86_64Architecture.StorageType.VECTOR -> {
                            /*
                             * Only the first four xmm registers should ever be used; in particular,
                             * this means we never need xmmRegistersAVX512
                             */
                            Register reg = AMD64.xmmRegistersSSE[move.indexOrOffset()];
                            assert reg.name.equals(move.debugName());
                            assert reg.getRegisterCategory().equals(AMD64.XMM);
                            yield AssignedLocation.toRegister(reg);
                        }
                        case X86_64Architecture.StorageType.STACK -> AssignedLocation.toStack(move.indexOrOffset());
                        default -> throw unsupportedFeature("Unhandled VMStorage: " + move);
                    };
                }
            }

            return storages;
        }
    }

    public static final AbiUtils SysV = new X86_64() {
        @Override
        protected CallingSequence makeCallingSequence(MethodType type, FunctionDescriptor desc, boolean forUpcall, LinkerOptions options) {
            return jdk.internal.foreign.abi.x64.sysv.CallArranger.getBindings(type, desc, forUpcall, options).callingSequence();
        }

        @Override
        public int supportedCaptureMask() {
            return CapturableState.ERRNO.mask();
        }
    };

    public static final AbiUtils Win64 = new X86_64() {
        @Override
        protected CallingSequence makeCallingSequence(MethodType type, FunctionDescriptor desc, boolean forUpcall, LinkerOptions options) {
            return jdk.internal.foreign.abi.x64.windows.CallArranger.getBindings(type, desc, forUpcall, options).callingSequence();
        }

        @Override
        public int supportedCaptureMask() {
            return CapturableState.ERRNO.mask() | CapturableState.GET_LAST_ERROR.mask() | CapturableState.WSA_GET_LAST_ERROR.mask();
        }
    };
}
