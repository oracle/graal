#
# Copyright (c) 2018, 2019, Oracle and/or its affiliates.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
# conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to
# endorse or promote products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
#
QUIETLY$(MX_VERBOSE)  = @

.PHONY: default

default: tool-info.txt

ifdef CLANG_CC
  CLANG=$(CLANG_CC)
else
  CLANG?=clang
endif
ifdef CLANG_CXX
  CLANGXX=$(CLANG_CXX)
else
  CLANGXX?=clang++
endif
ifdef CLANG_LLVM_AS
  LLVM_AS=$(CLANG_LLVM_AS)
else
  LLVM_AS?=llvm-as
endif
ifdef CLANG_LLVM_LINK
  LLVM_LINK=$(CLANG_LLVM_LINK)
else
  LLVM_LINK?=llvm-as
endif
ifdef CLANG_LLVM_DIS
  LLVM_DIS=$(CLANG_LLVM_DIS)
else
  LLVM_DIS?=llvm-dis
endif
ifdef CLANG_LLVM_OPT
  LLVM_OPT=$(CLANG_LLVM_OPT)
  OPT=$(CLANG_LLVM_OPT)
else
  LLVM_OPT?=opt
  OPT=$(LLVM_OPT)
endif
ifdef CLANG_LLVM_OBJCOPY
  LLVM_OBJCOPY=$(CLANG_LLVM_OBJCOPY)
else
  LLVM_OBJCOPY?=llvm-objcopy
endif

ifndef TOOLCHAIN_CLANG
  TOOLCHAIN_CLANG=/error/TOOLCHAIN_CLANG/not/set
endif

ifndef TOOLCHAIN_CLANGXX
  TOOLCHAIN_CLANG=/error/TOOLCHAIN_CLANGXX/not/set
endif

FC?=gfortran

CFLAGS+= $(SUITE_CFLAGS)
CXXFLAGS+= $(SUITE_CXXFLAGS) -std=c++11 -stdlib=libc++
CPPFLAGS+= $(SUITE_CPPFLAGS)
LDFLAGS+= $(SUITE_LDFLAGS)

ifeq ($(OS), darwin)
# NOTE: the darwin linker refuses bundle bitcode if any of the dependencies do not have a bundle section.
#   However, it does include the bundle if linked with -flto, although the warning still says otherwise.
EMBED_BC=-flto -Wl,-bitcode_bundle -Wno-everything
else
EMBED_BC=-fembed-bitcode
endif

ifdef CLANG_NO_OPTNONE
SULONG_MAKE_CLANG_IMPLICIT_ARGS=
else
SULONG_MAKE_CLANG_IMPLICIT_ARGS=-Xclang -disable-O0-optnone
endif

ifeq ($(OS), darwin)
CLANG_PREFIX=/usr/bin/xcrun
CLANG:=$(CLANG_PREFIX) $(CLANG)
CLANGXX:=$(CLANG_PREFIX) $(CLANGXX)
else
CLANG_PREFIX=
endif

tool-info.txt:
	@echo "Tools:" > $@
	@echo "  CLANG: $(CLANG)" >> $@
	@echo "  CLANGXX: $(CLANGXX)" >> $@
	@echo "  LLVM_AS: $(LLVM_AS)" >> $@
	@echo "  LLVM_LINK: $(LLVM_LINK)" >> $@
	@echo "  LLVM_DIS: $(LLVM_DIS)" >> $@
	@echo "  LLVM_OPT: $(LLVM_OPT)" >> $@
	@echo "  LLVM_OBJCOPY: $(LLVM_OBJCOPY)" >> $@
	@echo "  FC: $(FC)" >> $@
	@echo "LLVM_AS Version info:" >> $@
	$(LLVM_AS) --version >> $@
	@cat $@

ifdef GRAALVM_LLVM_HOME
%/ref.out: LDFLAGS+=-Wl,-rpath,${GRAALVM_LLVM_HOME}/native/lib -Wno-override-module
endif

%.c.dir/ref.out: %.c
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -g -o $@ $^

%.cpp.dir/ref.out: %.cpp
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -g -o $@ $^

%.cc.dir/ref.out: %.cc
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -g -o $@ $^

%.C.dir/ref.out: %.C
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -g -o $@ $^

%.cint.dir/ref.out: %.cint
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o $@ $^

%.gcc.dir/ref.out: %.gcc
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o $@ $^

%.gpp.dir/ref.out: %.gpp
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@ $^

%.f.dir/ref.out: %.f
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(FC) -w -J$(shell dirname $@) $(CPPFLAGS) $(FFLAGS) $(LDFLAGS) -g -o $@ $^

%.f90.dir/ref.out: %.f90
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(FC) -w -J$(shell dirname $@) $(CPPFLAGS) $(FFLAGS) $(LDFLAGS) -g -o $@ $^

%.f03.dir/ref.out: %.f03
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(FC) -w -J$(shell dirname $@) $(CPPFLAGS) $(FFLAGS) $(LDFLAGS) -g -o $@ $^

%.bc: %.dragonegg.ll
	$(QUIETLY) $(DRAGONEGG_LLVMAS) -o $@ $<

%/gcc_O0.bc: %/gcc_O0.ll
	$(QUIETLY) $(DRAGONEGG_LLVMAS) -o $@ $<

%_MISC_OPTS.bc: %.bc
	$(QUIETLY) $(OPT) -o $@ -functionattrs -instcombine -always-inline -jump-threading -simplifycfg -mem2reg $<

%_MEM2REG.bc: %.bc
	$(QUIETLY) $(OPT) -o $@ -mem2reg $<

# link .ll files first so that clang gets a single file and -fembed-bitcode can work
%.ll.linked-ref-out.ll: %.ll
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(LLVM_LINK) -S -o $@ $^

%.ll.dir/ref.out: %.ll.linked-ref-out.ll
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g $(LDFLAGS) -o $@ $^

define OPT_RULES
%.c.dir/$(1).bc: %.c
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g -o $$@ $$<

%.cpp.dir/$(1).bc: %.cpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g -o $$@ $$<

%.cc.dir/$(1).bc: %.cc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g -o $$@ $$<

%.C.dir/$(1).bc: %.C
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g -o $$@ $$<

%.gcc.dir/$(1).bc: %.gcc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g -o $$@ $$<

%.cint.dir/$(1).bc: %.cint
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g -o $$@ $$<

%.gpp.dir/$(1).bc: %.gpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) -c -emit-llvm $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g -o $$@ $$<

%.f.dir/$(1).dragonegg.ll: %.f
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(DRAGONEGG_FC) -w -S -fplugin=$(DRAGONEGG) -fplugin-arg-dragonegg-emit-ir -$(1) -J$$(shell dirname $$@) $(CPPFLAGS) $(FFLAGS) -o $$@ $$<

%.f90.dir/$(1).dragonegg.ll: %.f90
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(DRAGONEGG_FC) -w -S -fplugin=$(DRAGONEGG) -fplugin-arg-dragonegg-emit-ir -$(1) -J$$(shell dirname $$@) $(CPPFLAGS) $(FFLAGS) -o $$@ $$<

%.f03.dir/$(1).dragonegg.ll: %.f03
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(DRAGONEGG_FC) -w -S -fplugin=$(DRAGONEGG) -fplugin-arg-dragonegg-emit-ir -$(1) -J$$(shell dirname $$@) $(CPPFLAGS) $(FFLAGS) -o $$@ $$<

%.c.dir/gcc_$(1).ll: %.c
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(DRAGONEGG_GCC) -w -S --std=gnu99 -fplugin=$(DRAGONEGG) -fplugin-arg-dragonegg-emit-ir -$(1) $(CPPFLAGS) $(CFLAGS) -o $$@ $$<

%.ll.dir/$(1).bc: %.ll
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(LLVM_LINK) -o $$@ $$^

%.c.dir/gcc_$(1).ll: %.c
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(DRAGONEGG_GCC) -w -S --std=gnu99 -fplugin=$(DRAGONEGG) -fplugin-arg-dragonegg-emit-ir -$(1) $(CPPFLAGS) $(CFLAGS) -o $$@ $$<


%.c.dir/$(1)_OUT.bc: %.c
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.cpp.dir/$(1)_OUT.bc: %.cpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.cc.dir/$(1)_OUT.bc: %.cc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.C.dir/$(1)_OUT.bc: %.C
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.gcc.dir/$(1)_OUT.bc: %.gcc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.cint.dir/$(1)_OUT.bc: %.cint
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANG) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.gpp.dir/$(1)_OUT.bc: %.gpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(CLANGXX) $(EMBED_BC) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) -g $(LDFLAGS) -o $$@ $$<

%.f.dir/$(1)_OUT.bc: %.f.dir/ref.out %.f.dir/$(1).bc
	$(QUIETLY) cp $$< $$@
	$(QUIETLY) $(LLVM_OBJCOPY) --add-section .llvmbc=$$(word 2,$$^) $$@

%.f90.dir/$(1)_OUT.bc:%.f90.dir/ref.out %.f90.dir/$(1).bc
	$(QUIETLY) cp $$< $$@
	$(QUIETLY) $(LLVM_OBJCOPY) --add-section .llvmbc=$$(word 2,$$^) $$@

%.f03.dir/$(1)_OUT.bc: %.f03.dir/ref.out %.f03.dir/$(1).bc
	$(QUIETLY) cp $$< $$@
	$(QUIETLY) $(LLVM_OBJCOPY) --add-section .llvmbc=$$(word 2,$$^) $$@

endef

$(eval $(call OPT_RULES,O0,-O0 ${SULONG_MAKE_CLANG_IMPLICIT_ARGS}))
$(eval $(call OPT_RULES,O1,-O1))
$(eval $(call OPT_RULES,O2,-O2))
$(eval $(call OPT_RULES,O3,-O3))

# toolchain rule
define TOOLCHAIN_OPT_RULES
%.c.dir/$(1)_toolchain.bc: %.c
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANG) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o $$@ $$<

%.gcc.dir/$(1)_toolchain.bc: %.gcc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANG) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o $$@ $$<

%.cint.dir/$(1)_toolchain.bc: %.cint
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANG) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o $$@ $$<

%.cpp.dir/$(1)_toolchain.bc: %.cpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANGXX) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$<

%.cc.dir/$(1)_toolchain.bc: %.cc
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANGXX) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$<

%.C.dir/$(1)_toolchain.bc: %.C
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANGXX) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$<

%.gpp.dir/$(1)_toolchain.bc: %.gpp
	@mkdir -p $$(shell dirname $$@)
	$(QUIETLY) $(TOOLCHAIN_CLANGXX) $(2) -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$<

endef

$(eval $(call TOOLCHAIN_OPT_RULES,plain,))
$(eval $(call TOOLCHAIN_OPT_RULES,O0,-O0 ${SULONG_MAKE_CLANG_IMPLICIT_ARGS}))
$(eval $(call TOOLCHAIN_OPT_RULES,O1,-O1))
$(eval $(call TOOLCHAIN_OPT_RULES,O2,-O2))
$(eval $(call TOOLCHAIN_OPT_RULES,O3,-O3))
# no link
$(eval $(call TOOLCHAIN_OPT_RULES,plain_nolink,-c))
$(eval $(call TOOLCHAIN_OPT_RULES,O0_nolink,-c -O0 ${SULONG_MAKE_CLANG_IMPLICIT_ARGS}))
$(eval $(call TOOLCHAIN_OPT_RULES,O1_nolink,-c -O1))
$(eval $(call TOOLCHAIN_OPT_RULES,O2_nolink,-c -O2))
$(eval $(call TOOLCHAIN_OPT_RULES,O3_nolink,-c -O3))
# shared
$(eval $(call TOOLCHAIN_OPT_RULES,plain_shared,-shared -fPIC))
$(eval $(call TOOLCHAIN_OPT_RULES,O0_shared,-shared -fPIC -O0 ${SULONG_MAKE_CLANG_IMPLICIT_ARGS}))
$(eval $(call TOOLCHAIN_OPT_RULES,O1_shared,-shared -fPIC -O1))
$(eval $(call TOOLCHAIN_OPT_RULES,O2_shared,-shared -fPIC -O2))
$(eval $(call TOOLCHAIN_OPT_RULES,O3_shared,-shared -fPIC -O3))

# allow linking ll tests with C sources

%.c.ll: %.c
	@mkdir -p $(shell dirname $@)
	$(QUIETLY) $(CLANG) -S -emit-llvm -Wall -Wextra -Werror -Wno-unused-command-line-argument $(CPPFLAGS) $(CFLAGS) -g -o $@ $<

define _ADD_DEP_OPT
$(2).dir/$(1).bc:  $$(addsuffix .ll,$(3))
endef

# Add extra dependencies to a test file
#
# SYNOPSIS:
#    ADD_DEPENDENCY <test file> <list of extra dependencies>
#
# EXAMPLE:
#    $(eval $(call ADD_DEPENDENCY,path/to/test.ll,path/to/test-main.c path/to/test-utility.c))
#
# LIMITATION:
#    Currently, only bitcode tests (.ll) and C dependencies (.c) are supported.
#
define ADD_DEPENDENCY
# add dependency to ref.out
$(1).linked-ref-out.ll: $$(addsuffix .ll,$(2))

# add dependencies to Ox.bc
$$(eval $$(call _ADD_DEP_OPT,O0,$(1),$(2)))
$$(eval $$(call _ADD_DEP_OPT,O1,$(1),$(2)))
$$(eval $$(call _ADD_DEP_OPT,O2,$(1),$(2)))
$$(eval $$(call _ADD_DEP_OPT,O3,$(1),$(2)))
endef

# disable implicit rules
.SUFFIXES:
