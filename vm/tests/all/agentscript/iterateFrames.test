# Copyright (c) 2019, 2023 Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#
> java CopyStripLicense.java iterateFrames* ${TMP_DIR}/
> java CopyStripLicense.java ../../../benchmarks/agentscript/sieve.js ${TMP_DIR}/sieve.js
> java CopyStripLicense.java agent-fib-main.js ${TMP_DIR}/fib.js
> cd ${TMP_DIR}
>[0] js iterateFramesJsTypes.mjs
6
>[0] js --insight=iterateFramesJsInsight.js iterateFramesJsTypes.mjs
at ./iterateFramesJsTypesMod.mjs:3 {"a":3}{"b":2}{"c":1}{}
6
>[0] js --insight=iterateFrames.js fib.js
dumping locals
    at fib (fib.js:8:3) n has value 1
    at fib (fib.js:8:3) this has value [object global]
    at fib (fib.js:10:15) n has value 2
    at fib (fib.js:10:15) this has value [object global]
    at fib (fib.js:10:15) n has value 3
    at fib (fib.js:10:15) this has value [object global]
    at fib (fib.js:10:15) n has value 4
    at fib (fib.js:10:15) this has value [object global]
.*at.*main.*fib.js.*prefix has value Three is the result
.*at.*main.*fib.js.*fib4 has value undefined
.*at.*main.*fib.js.*this has value .*
.*at.*program.*fib.js:.*this has value .*
end of locals
dumping locals
    at fib (fib.js:8:3) n has value 1
    at fib (fib.js:8:3) this has value [object global]
    at fib (fib.js:10:34) n has value 3
    at fib (fib.js:10:34) this has value [object global]
    at fib (fib.js:10:15) n has value 4
    at fib (fib.js:10:15) this has value [object global]
.*at.*main.*fib.js.*prefix has value The result is three
.*at.*main.*fib.js.*fib4 has value undefined
.*at.*main.*fib.js.*this has value .*
.*at.*program.*fib.js:.*this has value .*
end of locals
dumping locals
    at fib (fib.js:8:3) n has value 1
    at fib (fib.js:8:3) this has value [object global]
    at fib (fib.js:10:15) n has value 2
    at fib (fib.js:10:15) this has value [object global]
    at fib (fib.js:10:34) n has value 4
    at fib (fib.js:10:34) this has value [object global]
.*at.*main.*fib.js.*prefix has value The result is three
.*at.*main.*fib.js.*fib4 has value undefined
.*at.*main.*fib.js.*this has value .*
.*at.*program.*fib.js:.*this has value .*
end of locals
The result is three 3
> cat >err0.js
< insight.on('enter', (ctx, frame) => {
<    ctx.iterateFrames();
< }, {
<    expressions : true
< });
>[7] js --insight=err0.js -e "6 * 7"
TypeError: invokeMember.*iterateFrames.*:program.*Arity error.*
.*at.*js.*err0.js.*
.*at.*js.*program.*
> cat >err1.js
< insight.on('enter', (ctx, frame) => {
<    ctx.iterateFrames(null);
< }, {
<    expressions : true
< });
>[7] js --jvm --insight=err1.js -e "6 * 7"
TypeError: invokeMember.*iterateFrames.*on :program.*Cannot execute null
.*at.*js.*err1.js.*
.*at.*js.*program.*
> cat >err2.js
< insight.on('enter', (ctx, frame) => {
<    ctx.iterateFrames({});
< }, {
<    expressions : true
< });
>[7] js --jvm --insight=err2.js -e "6 * 7"
TypeError: invokeMember.*iterateFrames.*on :program.*Cannot execute {}
.*at.*js.*err2.js.*
.*at.*js.*program.*
>[7] js --insight=iterateFramesSieve.js -e "count=0" sieve.js
Computed 97 primes in [0-9]+ ms. Last one is 509
Computed 194 primes in [0-9]+ ms. Last one is 1181
Computed 388 primes in [0-9]+ ms. Last one is 2677
Computed 776 primes in [0-9]+ ms. Last one is 5897
Computed 1552 primes in [0-9]+ ms. Last one is 13033
Computed 3104 primes in [0-9]+ ms. Last one is 28541
Computed 6208 primes in [0-9]+ ms. Last one is 61687
Computed 12416 primes in [0-9]+ ms. Last one is 133033
Computed 24832 primes in [0-9]+ ms. Last one is 284831
Computed 49664 primes in [0-9]+ ms. Last one is 607417
Iterating the Filter with 1289513 stack from Insight
.*at.*js.*Filter.*sieve.js:8:.*
.*at.*js.*Filter.acceptAndAdd.*sieve.js:25:.*
.*at.*js.*Primes.next.*sieve.js:42:.*
.*at.*js.*measure.*sieve.js:55:.*
.*at.*js.*oneRound.*sieve.js:92:.*
.*at.*js.*setTimeout.*sieve.js:84:.*
.*at.*js.*program.*sieve.js:97:.*
Is the printed stack comparable with thrown exception?
.*at.*js.*dumpStack.*iterateFramesSieve.js:10:.*
.*at.*js.*Filter.*sieve.js:8-12:.*
.*at.*js.*Filter.acceptAndAdd.*sieve.js:25:.*
.*at.*js.*Primes.next.*sieve.js:42:.*
.*at.*js.*measure.*sieve.js:55:.*
.*at.*js.*oneRound.*sieve.js:92:.*
.*at.*js.*setTimeout.*sieve.js:84:.*
.*at.*js.*program.*sieve.js:97:.*
