INSTALL_FileManipulationError=I/O error encountered during processing component {0}: {1}
INSTALL_OverwriteWithDirectory=Refused to overwrite file with directory: {0}
INSTALL_OverwriteWithFile=Refused to overwrite directory with file: {0}
INSTALL_OverwriteWithLink=Refused to overwrite directory or file with symlink: {0}
INSTALL_ReplacedFileDiffers=Existing file contents differ: {0}. Run with -f to force overwrite.
INSTALL_CannotCleanupFile=Could not clean up file {0}: {1}
INSTALL_ErrorClosingFile=Error closing component file {0}: {1}
INSTALL_SkipIdenticalFile=Skipping identical file: {0}
INSTALL_InstallingFile=Extracting: {0}
INSTALL_ReplacingFile=Replacing: {0}
INSTALL_CreatingDirectory=Creating directory: {0}
INSTALL_CreatingSymlink=Creating symbolic link: {0} -> {1}
INSTALL_CleanupFile=Cleaning up file: {0}
INSTALL_CleanupDirectory=Cleaning up directory: {0}
INSTALL_SkippingSharedFile=Skipping shared file: {0}
INSTALL_FailedToDeleteFile=Failed to remove file {0}: {1}
INSTALL_FailedToDeleteDirectory=Failed to remove directory {0}: {1}
INSTALL_PrepareToInstall=Preparing to install {0}, contains {1}, version {2} ({1})
INSTALL_ErrorDuringProcessing=Installation of {0} failed: {1}
INSTALL_IgnoreFailedInstallation=Ignored failure: {0}
INSTALL_IgnoreFailedInstallation2=Ignored failed installation of {0}: {1}
INSTALL_VerboseValidation=Checking entry: {0}
INSTALL_VerboseCapabilityNone=None
INSTALL_VerboseCheckRequirements=Checking requirements of component {1} ({0}), version {2}
INSTALL_VerboseCapability=\tRequires {0} = {1}, GraalVM provides: {2}
INSTALL_VerboseProcessingArchive=Processing Component archive: {0}
INSTALL_VerboseProcessingComponent=Processing Component: {0}
INSTALL_InvalidComponentArchive={0} is corrupted or is not a component archive.
INSTALL_RemoveExistingComponent=Replacing existing component: {1} ({0}, version {2}) with {4} ({3}, version {5})
INSTALL_InstallNewComponent=Installing new component: {1} ({0}, version {2})
UNINSTALL_DeletingDirectoryRecursively=Erasing subtree: {0}
INSTALL_ComponentAlreadyInstalled=Component {0} ({1}) is already installed.
INSTALL_RebuildPolyglotNeeded=\
\nIMPORTANT NOTE:\n\
---------------\n\
Set of GraalVM components that provide language implementations have changed. The Polyglot native \
image and polyglot native C library may be out of sync: \n\
- new languages may not be accessible\n\
- removed languages may cause the native binary to fail on missing resources or libraries.\n\
To rebuild and refresh the native binaries, use the following command:\
    \n        {1}{0}gu rebuild-images\n

# {0} the native-image component ID.
INSTALL_RebuildPolyglotNeeded2=\
You may need to install "{0}" component which provide the rebuild tools.\n\n
 
INSTALL_WriteOutsideGraalvm=Attempt to write outside GraalVM directory: {0}
INSTALL_SymlinkOutsideGraalvm=Symlink {0} points outside GraalVM directory: {1}

INSTALLER_FailError={0}

UNINSTALL_UnknownComponentId=Unknown component id: {0}. Use "gu list" to get list of components and their IDs.
UNINSTALL_IgnoreFailed=Failed uninstallation of {0} ignored. The error was: {1}
UNINSTALL_ErrorDuringProcessing=Uninstallation failed: {0}
UNINSTALL_UninstallingComponent=Uninstalling: {0}
UNINSTALL_DeletingFile=Deleting: {0}
UNINSTALL_DeletingDirectory=Deleting directory: {0}
UNINSTALL_ErrorRestoringPermissions=Error restoring permissions for {0}: {1}
UNINSTALL_BrokenDependenciesWarn=Warning: Uninstallation will break dependent components:
UNINSTALL_BrokenDependencies=Uninstallation would break dependent components. Broken dependencies follow:
UNINSTALL_BreakDepSource={0} ({1}) is required by:
UNINSTALL_BreakDepTarget=\    {0} ({1})
UNINSTALL_BreakDependenciesTerminate=Other components would be broken by this operation; will abort. Use -D or -f to override.
UNINSTALL_BrokenDependenciesRemove=Uninstallation would break dependent Components. They will be uninstalled as well:

INSTALL_ParametersMissing=Missing filename(s) of component bundle(s) to install.
INSTALL_Help=\
    Usage:\n\
    gu install [-0cCDfFiLMnorsuvyxY] param [param ...]\n\
\n\
Options:\n\
\  -0, --dry-run                     dry run, do not change anything\n\
\  -c, --catalog                     treat parameters as component IDs from catalog of GraalVM components. This is the default.\n\
\  -C, --custom-catalog <url,dir>    uses a specific catalog URL or local directory to locate components.\n\
\  -D, --local-deps                  attempt to resolve dependencies using local files located next to the paths on commandline.\n\
\  --edition <edition>               use catalogs from the specified edition\n\
\  -L, --local-file, --file          treat parameters as local filenames of packaged components.\n\
\  -f, --force                       force overwrite, bypass version checks.\n\
\  -i, --fail-existing               fail on existing component.\n\
\  -M, --no-deps                     ignore dependencies.\n\
\  -n, --no-progress                 do not display download progress.\n\
\  -o, --overwrite                   overwrite different files.\n\
\  -r, --replace                     replace existing components.\n\
\  -s, --no-verify-jars              skips integrity verification of component archives\n\
\  -u, --url                         interpret parameters as URLs of packaged components.\n\
\  -v, --verbose                     be verbose. Prints versions and dependency info.\n\
\  -x, --ignore                      ignore failures.\n\
\  -y, --only-validate               do not install, just check compatibility and conflicting files.\n\
\  -Y, --validate-before             downloads, verifies, checks file conflict before any disk change is made.\n
    

UNINSTALL_ParametersMissing=Missing component ID(s) to uninstall.
UNINSTALL_Help=\
    Usage:\n\
    gu remove [-0DfMxv] id [id ...]\n\
\n\
Options:\n\
\  -0, --dry-run      dry run, do not change anything.\n\
\  -D, --remove-deps  remove dependent components as well.\n\
\  -f, --force        force overwrite, bypass version checks.\n\
\  -M, --no-deps      ignore dependencies.\n\
\  -x, --ignore       do not stop on undeletable files.\n\
\  -v, --verbose      be verbose. Prints versions and dependency info.\n\

LIST_NoComponentsFound=No components found.
LIST_ComponentShortListHeader=\
ComponentId              Version             Component name                Stability                     Origin \n\
---------------------------------------------------------------------------------------------------------------------------------
#                        25                  +20                           +30                           +30
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
LIST_ComponentShortListHeader_Simple@=*ComponentList
LIST_ComponentShortList=%1$-25.25s%2$-20.20s%3$-30.30s%6$-30.30s%4$s
LIST_ComponentShortList_Simple@=%5$s;%2$s;%3$s;%4$s;%6$s
LIST_PrintVerbatim={0}
LIST_ComponentFilesHeader={0} installed files and directories:
LIST_ComponentFilesHeader_Simple@=*Files:{0}
LIST_ComponentFilesEnd@=*EndFiles
LIST_MetadataUnknown=n/a
LIST_ComponentBasicInfo=\
ID       : {0}\n\
Name     : {2}\n\
Version  : {1}\n\
GraalVM  : {3}\n\
Stability: {6}\n\
Origin   : {4}
LIST_ComponentBasicInfo_Simple@={5};{0};{1};{2};{3};{4};{6}
LIST_RequirementsHeader=Requirements
LIST_ErrorInComponentMetadata=There were errors reading component information:
LIST_ErrorInComponentMetadataItem=    - {0}

LIST_Help=\
    Usage:\n\
    gu list [-clv] [<expression> [<expression2> ...]]\n\
\n\
    The expression filters installed components. Can be a component ID,\
    or a regular expression, optionally enclosed in quotes or double quotes.\
    If no expression is given, all installed components are listed.\n\
\n\
    Options:\n\
\  -c, --catalog        list components available in catalog. Same as "gu available" for compatibility.\n\
\  -l, --list-files     list files. Only for installed components.\n\
\  -v, --verbose        more detailed info.


AVAILABLE_Help=\
    Usage:\n\
    gu available [-aClvV] [<expression> [<expression2> ...]]\n\
\n\
    The expression filters catalog components. Can be a component ID,\
    or a regular expression, optionally enclosed in quotes or double quotes.\
    If no expression is given, all installed components are listed.\n\
\n\
    Options:\n\
\  -a, --all-versions                show all versions\n\
\  -C, --custom-catalog <url,dir>    uses a specific catalog URL or local directory to locate components.\n\
\  --edition <edition>               show components from the specified edition\n\
\  -l, --list-files                  list files. Only for installed components.\n\
\  --show-core                       show core component\n\
\  --show-updates                    show updated versions of components, too.\n\n\
\  -v, --verbose                     more detailed info.\n\
\  -V, --use-version <ver>           use specified version of components.\n\
\n\
Version can be specified as:\n\
\  version  - the specified version, and its newest patch\n\
\  ~version - the specified version, and its newest patch (same as preceding form)\n\
\  =version - precise version, including patch number\n\
\  +version - the most recent version, newer or equal to the specified one\n\
as part of "-V" switch. Can be also appended after component id, e.g. ruby=1.0

INFO_Help=\
    Usage:\n\
    gu info [-cCFlnLprstuvV] <param> [<param> ...]\n\
\n\
    Prints information about the component in the specified file or about a specific \
    component in the catalog.\n\
\n\
    Options:\n\
\  -c, --catalog                     treat parameters as component IDs from catalog of GraalVM components. This is the default.\n\
\  -C, --custom-catalog <url,dir>    uses a specific catalog URL or local directory to locate components.\n\
\  -L, --local-file                  treat parameters as local filenames of packaged components.\n\
\  -l, --list-files                  list files.\n\
\  -n, --no-progress                 do not display download progress.\n\
\  -p, --paths                       displays full path in table listing.\n\
\  -r, --ignore-open                 ignores errors when opening component archives. Continues with the next component.\n\
\  -s, --no-verify-jars              skips integrity verification of component archives\n\
\  -t, --no-tables                   do NOT use table listings.\n\
\  -u, --url                         interpret parameters as URLs of packaged components.\n\
\  -v, --verbose                     be verbose. Prints versions and dependency info.\n\
\  -V, --use-version <ver>           use specified version of components.\n\
\n\
Version can be specified as:\n\
\  version  - the specified version, and its newest patch\n\
\  ~version - the specified version, and its newest patch (same as preceding form)\n\
\  =version - precise version, including patch number\n\
\  +version - the most recent version, newer or equal to the specified one\n\
as part of "-V" switch. Can be also appended after component id, e.g. ruby=1.0

INFO_ClosingComponent=Error closing component bundle {0}: {1}
INFO_ErrorOpeningBundle=Invalid or corrupted component bundle {0}: {1}
INFO_ErrorReadingBundle=I/O error reading component bundle {0}: {1}
INFO_CorruptedBundleMetadata=Invalid or missing metadata {1} in bundle {0}: {2}
INFO_MissingFilename=Missing filename.

INFO_ComponentShortListHeader=\
File                ComponentId              Version    Component name                Stability\n\
--------------------------------------------------------------------------------------------------------
#                   +20                      +25        +11                           +30
#
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentShortList=%4$-20.20s%1$-25.25s%2$-11.11s%3$-30.30s%5$s

INFO_ComponentLongListHeader=\
Path\n\
    ComponentId              Version             Component name                Stability\n\
-------------------------------------------------------------------------------------------------
#                            +25                 +20                           +30
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentLongList=%4$s\n    %1$-21.21s%2$-20.20s%3$-30.30s%5$s

INFO_ComponentNoFileHeader=\
ComponentId              Version             Component name                Stability\n\
--------------------------------------------------------------------------------------------------
#+00                     +25                 +20                           +30
#
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentShortListNoFile=%1$-25.25s%2$-20.20s%3$-30.30s%5$s

INFO_ComponentBasicInfo=\
Filename : {3}\n\
Name     : {2}\n\
ID       : {0}\n\
Version  : {1}\n\
GraalVM  : {4}\n\
Stability: {5}

INFO_ComponentRequirementsHeader=Requirements:
INFO_ComponentRequirement=\t{0} = {1}

INFO_ComponentBroken=Component bundle {0} is broken
INFO_ComponentErrorIndent=\t- {0}
INFO_ComponentWillNotInstall=Component bundle {0} cannot be installed
INFO_ComponentDependencyIndent=\t- {0}

# Relative path from graalvm home to the rebuild-images tool
REBUILD_ToolRelativePath=lib/svm/bin/rebuild-images
REBUILD_ImageToolInterrupted=The image rebuild has been interrupted.
REBUILD_RewriteRebuildToolName=gu rebuild-images


INSTALL_LicenseAcceptedAt=License {0} already accepted on {1} for {2} ({3}).
INSTALL_AcceptLicense=The component(s) {0} requires to accept the following license: {1}
INSTALL_AcceptSingleLicense=Enter "Y" to confirm and accept all the license(s). Enter "R" to the see license text.\n\
     Any other input will abort installation:  
INSTALL_LicensesToAccept=Component(s) selected for install require(s) to accept license(s):
INSTALL_LicenseComponentStart={0}
INSTALL_LicenseComponentCont={0}, {1}
INSTALL_AcceptLicenseComponents=\t{2}: {0} - {1}
INSTALL_AcceptAllLicensesPrompt=Enter "Y" to confirm and accept all the license(s).\n\
    Enter a number to the see license text. Enter "a" to abort the operation: 
INSTALL_AcceptLicensePrompt=Do you accept this license (Y for "yes", any other input for "no") ? : 
INSTALL_AcceptPromptResponseYes@=Yes|y
INSTALL_AcceptPromptResponseRead@=List|Lst|L|Read|R
INSTALL_AcceptPromptResponseAbort@=Abort|a|exit|e
INSTALL_LicenseNumberInvalidEntry=The entry is not valid. Enter a number (1-{0}, "Y" or "a": 
INSTALL_LicenseNumberOutOfRange=Invalid number, must be 1-{0}: 
INSTALL_LicenseNotFound=License not found in archive at {0}.
INSTALL_ErrorHandlingLicenses=Error during processing of license(s): {0}
INSTALL_RequiredDependencies=Additional Components are required:
# {0} - component name
# {1} - component Id
# {2} - component version
# {3} - additional test 'required by' or empty
INSTALL_RequiredDependencyLine=\    {0} ({1}, version {2}){3}
# {0} - list of required component names/ids, see INSTALL_RequiredDependencyItem
INSTALL_RequiredDependencySuffix=, required by: {0}
INSTALL_RequiredDependencyItem={0} ({1})
INSTALL_UnknownComponents=Missing required component(s):
# {0} - component Id
# {1} - additional test 'required by' or empty
INSTALL_UnknownComponentLine=\    {0}{1}
INSTALL_UnresolvedDependencies=There were unresolved dependencies, aborting installation.
INSTALL_UnknownComponentsNote1=Note: You can use "-c", e.g. \n\
    \tgu install -L -c {0}\n\
    to resolve dependencies using catalog(s) and download required additional components.
INSTALL_UnknownComponentsNote2=Note: You can use "-D", e.g. \n\
    \tgu install -L -D {0}\n\
    to search for dependencies in parent directories of the files provided on commandline.

# {0} - native component ID, name of the package
# {1} - the component name.
UNINSTALL_NativeComponent={1} ({0}) is a native component, use system tools to remove it, e.g.\n\
\  yum remove {0}\n
# {0} - native component ID, name of the package
# {1} - the component name.
UNINSTALL_BundledComponent={1} ({0}) is bundled in the base package, it can not be removed.
# {0} - component ID
UNINSTALL_CoreComponent={0} is a core component and cannot be uninstalled.

# {0} - the current version
UPGRADE_NoUpdateFound=No GraalVM upgrade is found for the version {0}
UPGRADE_NoUpdateLatestVersion=No upgrade of GraalVM core is necessary, {0} is the latest version.
# {0} - directory where a new installation should be created
UPGRADE_DirectoryNotWritable=New GraalVM installation cannot be created: directory {0} is not writable.
# {0} - directory where a new installation should be created
UPGRADE_TargetDirectoryExists=Cannot install GraalVM: file or directory {0} already exists
UPGRADE_CantDeleteOldSymlink=Could not delete old symlink {0}: {1}
UPGRADE_CantCreateNewSymlink=Unable to create new symlink {0}: {1}
# {0} - version
# {2} - java prefix
UPGRADE_GraalVMDirName@=graalvm-java{2}-{0}
# {0} - version
# {1} - edition
# {2} - java prefix
UPGRADE_GraalVMDirNameEdition@=graalvm-{1}-java{2}-{0}
# {0} - required version
UPGRADE_NoVersionSatisfiesComponents=No GraalVM version satisfies all the requested components. At least {0} is required.
UPGRADE_ComponentsCannotMigrate=Some of the installed components cannot migrate to the new version. Please upgrade to a specific GraalVM version first.
UPGRADE_ComponentsMissingFromEdition=Some of the installed components may be missing from edition "{0}". Use --ignore-missing to install anyway.
UPGRADE_CannotMigrateLicense=Could not migrate license acceptance: component {0}, license ID {1}.
UPGRADE_MissingParameter=Missing required parameter.
UPGRADE_CannotDowngrade=Cannot downgrade to an old version {0}. Please install manually.
UPGRADE_PreparingInstall=\
\n=========================================================================\n\
\tPreparing to install GraalVM Core version {0}.\n\
\tDestination directory: {1}\n\
=========================================================================
UPGRADE_InstallingCore=Installing GraalVM Core version {0} to {1}...
UPGRADE_MigratingLicenses=Copying license info from {0} to {1}.
UPGRADE_WarningEditionDifferent=NOTE: Downloaded GraalVM Core {0} specifies different installation directory name: {1}.
UPGRADE_TargetExistsNotDirectory=New GraalVM Core is to be installed to {0}; the destination exists. but is NOT a directory.
UPGRADE_TargetExistsNotEmpty=The destination directory {0} is not empty.
UPGRADE_TargetExistsContainsGraalVM=The destination directory {0} already contains a GraalVM version {1}.

UPDATE_Help=\
    Usage:\n\
    gu update [-f] [param ...]\n\
\n\
    Updates some or all installed components to their latest patches in the current\n\
    installation. Will not install new GraalVM Core - use "gu install" to do so.

UPGRADE_Help=\
    Usage:\n\
    gu upgrade [-cCdnLsSux] [version] [param ...]\n\
    gu update [-cCdnLsSux] [version] [param ...]\n\
\n\
    Options:\n\
\  -c, --catalog                treat parameters as component IDs from catalog of GraalVM components. This is the default.\n\
\  -C, --custom-catalog <url>   Uses a specific catalog URLto locate components.\n\
\  --edition <edition>          show components from the specified edition\n\
\  -L, --local-file             treat parameters as local filenames of packaged components.\n\
\  -n, --no-progress            do not display download progress.\n\
\  -s, --no-verify-jars         skips integrity verification of component archives\n\
\  -S, --no-symlink             do not create or update symlink\n\
\  -d, --target-dir             install into specified target dir, implies -S\n\
\  -u, --url                    interpret parameters as URLs of packaged components.\n\
\  -x, --ignore-missing         ignores missing components for the target version, install new core anyway\n\
\n\
    If "version" is specified, the GraalVM will be updated to that version.\n\
\n\ 
    The GraalVM core will be upgraded and existing components reinstalled in appropriate versions into the \n\
    new installation. Additional components to install may be specified as parameters. Install fails if the\\n\
    updated GraalVM core does not support any of currently installed components. -x will force the install and\n\
    will drop the unsupported component. -f will disable all version checks.\
\n

INFO_InvalidComponent=Invalid parameter: {0}
UPGRADE_NoSpecificVersion=GraalVM core is not available in version {0}.
UPGRADE_NoSpecificVersion2=GraalVM core is not available in version {0}. Pick e.g. {1}.

# {0} - the native-image component ID.
REBUILD_RebuildImagesNotInstalled=Error: rebuild-images utility is not available. You may need to install "{0}" component. \n\
Please refer to documentation for the details.

INSTALL_WarnLocalDependencies=Warning: -D (use local files for dependencies) was specified without -L (use local files); there \
    are no locations to load local files from. -D will be ignored.

INSTALL_CannotReplaceBundledComponent=The component {0} is bundled with the base GraalVM and cannot be replaced.
INSTALL_UsingNewerComponent=Using newer version of component {0} ({1}): {2} (the older version was: {3})
INSTALL_CannotDigestLicense=Could not digest license text: {0}

INSTALL_DownloadLicenseFile=License file
# {0} license name
INSTALL_DownloadLicenseName=Contents of "{0}"

# [0} license Id
# {1} error message
WARN_LicenseNotRecorded=Warning: Acceptance of license {0} could not be recorded: {1}
UPGRADE_CannotMigrateGDS=Warning: Could not migrate GDS settings
# {0} symlink name
# {1} symlink target
UPGRADE_CreatingSymlink=Creating symlink to the new GraalVM Installation: {0} -> {1}
UPGRADE_UpdatingSymlink=Updating symlink to the new GraalVM Installation: {0} -> {1}

# {0} - graalvm core name
# {1} - graalvm core version
# {2} - list of components
UPGRADE_MissingComponents=Components missing for {0} {1}: \n{2}
# {0} - component (short) ID
# {1} - component name
UPGRADE_MissingComponentItem=\t{0} ({1})
# {0} - preceding list part,
# {1} - additional item.
UPGRADE_MissingComponentListPart={0},\n{1}
# {0} - list contents
UPGRADE_MissingComponentListFinish={0}

@INSTALL_Error_ComponentDiffers_Report=\nBroken component and/or catalog: The remote component differs from the catalog information. \n\
    \                Catalog                             Component package\n\
    ---------------------------------------------------------------------------------\n\
    Id:       %1$-35s  %2$-35s\n\
    Version:  %3$-35s  %4$-35s\n\n
# The newline at start and the end of above message is deliberate

INSTALL_Error_ComponentDiffers=Component info mismatch.
